<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Cetra&#x27;s Thoughts</title>
        <link>https://cetra3.github.io</link>
        <description>Notes and Discussion pieces</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://cetra3.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 09 Apr 2020 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Implementing a Job queue with Tokio, PostgreSQL &amp; ZeroMQ</title>
                <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/implementing-a-jobq/</link>
                <guid>https://cetra3.github.io/blog/implementing-a-jobq/</guid>
                <description>&lt;p&gt;One of the challenges I have had with on premise solutions is the lack of reliable environments and constrained resources.   Not only are you limited in your ability to control things, you need to ensure that things continue on in the case of failure.&lt;&#x2F;p&gt;
&lt;p&gt;I was tasked with rewriting the job processing pipeline for my company&#x27;s product, &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolbench.com.au&#x2F;&quot;&gt;SchoolBench&lt;&#x2F;a&gt;, to ensure a greater level of robustness in the case of service or system failure.&lt;&#x2F;p&gt;
&lt;p&gt;This article steps through an approach to this using async rust &amp;amp; the help of tokio ZeroMQ library: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt; along with &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres&quot;&gt;tokio-postgres&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As some excellent work has been put in bringing tmq to async, I thought it pertinent to look at reapproaching the pipeline using async code.  I have published an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&quot;&gt;initial prototype&lt;&#x2F;a&gt; of what the end result may look like, and will be stepping through the approach here, and some of the tradeoffs I made&lt;&#x2F;p&gt;
&lt;h2 id=&quot;why-tmq-zeromq&quot;&gt;Why TMQ&#x2F;ZeroMQ?&lt;&#x2F;h2&gt;
&lt;p&gt;For those not familiar with &lt;a href=&quot;https:&#x2F;&#x2F;zeromq.org&#x2F;&quot;&gt;ZeroMQ&lt;&#x2F;a&gt;, it is a messaging library with a lot of features, from standard publish&#x2F;subscribe to more elaborate arrangements.  &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt; is a &lt;a href=&quot;https:&#x2F;&#x2F;www.tokio.rs&quot;&gt;tokio&lt;&#x2F;a&gt; compatible binding that allows you to bridge ZeroMQ with the async world of rust.&lt;&#x2F;p&gt;
&lt;p&gt;You would use ZeroMQ if you need to interact with other languages easily and don&#x27;t want it to be too opinionated on what message formats are being sent.  If you are purely using rust then this may be not be a great fit, but it does still provide you some great interprocess &amp;amp; internetwork capabilities that you won&#x27;t get from just tokio.&lt;&#x2F;p&gt;
&lt;p&gt;We use ZeroMQ in SchoolBench as it is a polyglot application and has a lot of components written in python &amp;amp; java as well as rust.  It is lightweight enough not to cause overheads &amp;amp; complex enough for the use cases I have thrown at it so far.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;prior-work&quot;&gt;Prior Work&lt;&#x2F;h2&gt;
&lt;p&gt;There are some existing rust based job queues that do similar things and may be more suited to your own personal tastes:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;kureuil&#x2F;batch-rs&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;kureuil&#x2F;batch-rs&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;badboy&#x2F;oppgave&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;badboy&#x2F;oppgave&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rusty-celery&#x2F;rusty-celery&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;rusty-celery&#x2F;rusty-celery&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Probably lots more I haven&#x27;t found&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Most of them use some sort of message broker, such as &lt;a href=&quot;https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;&quot;&gt;RabbitMQ&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-a-job&quot;&gt;What is a Job?&lt;&#x2F;h2&gt;
&lt;p&gt;It helps to explain what a job is.  In the context of SchoolBench a job is a piece of work that may take some time to do (think seconds), is quite intensive, and may fail. Once an asset is saved into SchoolBench, lots of processes are kicked off in the background to &lt;em&gt;fill in the blanks&lt;&#x2F;em&gt; and provide information about the asset.&lt;&#x2F;p&gt;
&lt;p&gt;Some examples of jobs are:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Running &lt;a href=&quot;..&#x2F;face-detection-with-tensorflow-rust&#x2F;&quot;&gt;Facial Recognition&lt;&#x2F;a&gt; on images using tensorflow&lt;&#x2F;li&gt;
&lt;li&gt;Generating Thumbnails and Watermarked renditions of images&lt;&#x2F;li&gt;
&lt;li&gt;Calculating whether a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;dhash&quot;&gt;photo is a duplicate&lt;&#x2F;a&gt; of another photo and marking the set of duplicates&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;A lot of these are quite intensive &amp;amp; can sometimes fail in weird and wonderful ways:  An image uploaded may be corrupted, so renditions may not run;  There may be an issue running the neural net;  The VM may be experience ballooning and fail to allocate memory, etc...&lt;&#x2F;p&gt;
&lt;p&gt;So we need a way of describing a discrete piece of work which may happen some time in the future and may happen by a completely isolated process.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;resource-contention&quot;&gt;Resource Contention&lt;&#x2F;h3&gt;
&lt;p&gt;We have very limited resources in an on premise environment. After providing a minimum recommendation it is important to tune for that worst case.  This is different in a cloud environment where you can spin up guests in a work stealing fashion if you throw more money at your infrastructure. on premise is usually more fixed in terms of server and hardware allocations, and so we need to plan for that.&lt;&#x2F;p&gt;
&lt;p&gt;This is one area where the job queue deviates from a lot of existing systems out there: we assume we&#x27;re just running on the one set of CPUs and so there is a fixed number of active jobs at any given time.&lt;&#x2F;p&gt;
&lt;p&gt;We also want a simple way to prioritise tasks as they are submitted, so that some jobs finish first, with higher value jobs such as thumbnail generation happening first. The job queue uses a simple 3-tier priority system to do this: High, Medium &amp;amp; Low.&lt;&#x2F;p&gt;
&lt;p&gt;This simple system could mean if there are not enough resources to finish jobs then there is a chance that lower tier jobs may never get around to completing.  In practice the sort of work loads we have seen this is not the case, but it is a possibility. In which case more processors would be needed to keep up with the load or another style of priority to be implemented (such as fair queueing).&lt;&#x2F;p&gt;
&lt;h3 id=&quot;persistence&quot;&gt;Persistence&lt;&#x2F;h3&gt;
&lt;p&gt;Jobs need to survive crashes and server restarts in a robust fashion.  Existing job queues utilise an existing persistence layer&#x2F;message broker such as &lt;a href=&quot;https:&#x2F;&#x2F;redis.io&#x2F;&quot;&gt;Redis&lt;&#x2F;a&gt; or &lt;a href=&quot;https:&#x2F;&#x2F;www.rabbitmq.com&#x2F;&quot;&gt;RabbitMQ&lt;&#x2F;a&gt;.  I have chosen PostgreSQL as the persistence layer as it is performant enough, and is already in use for metadata storage.  However, you could easily swap out another type of persistence with a bit of refactoring.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-overall-process&quot;&gt;The Overall Process&lt;&#x2F;h2&gt;
&lt;p&gt;The high level proces is as follows:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;A User Action triggers some sort of logic which requests a job.  This could be an automatic rule somewhere or could be the a user specifically requesting a job to run&lt;&#x2F;li&gt;
&lt;li&gt;A server listens for requests and puts them into a queue&lt;&#x2F;li&gt;
&lt;li&gt;If there are jobs that can be processed then they are submitted to the individual worker who is responsible for finishing the job&lt;&#x2F;li&gt;
&lt;li&gt;When a job completes or fails, then it is marked as so with a duration on how long things take&lt;&#x2F;li&gt;
&lt;li&gt;Everytime a new event is triggered, such as a job in a queue or a job completed&#x2F;failed, the server checks to see if it can mark jobs as processing&lt;&#x2F;li&gt;
&lt;li&gt;All job status updates &amp;amp; information is persisted to a db, so that things can pick up again if there is a failure &amp;amp; reports can be ran using standard SQL tools&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h3 id=&quot;client-server-worker&quot;&gt;Client, Server, Worker&lt;&#x2F;h3&gt;
&lt;p&gt;We split the roles of the job queue into 3 different types:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Clients&lt;&#x2F;strong&gt; that submit requests to the server&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;Server&lt;&#x2F;strong&gt; which does the main job queue loop&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;strong&gt;Workers&lt;&#x2F;strong&gt; that receive jobs and do work, returning whether the work was completed &lt;em&gt;(not the work outcome itself, just the status; we assume that the worker will update something out of band like another db or filesystem)&lt;&#x2F;em&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;One possible thing to note is that there is only ever one server, but there can be as many workers and clients as allowed.  The workers themselves can also be clients and submit requests if they want to.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;communication&quot;&gt;Communication&lt;&#x2F;h3&gt;
&lt;p&gt;The server, worker and clients all communicate via a ZeroMQ &lt;code&gt;DEALER&#x2F;ROUTER&lt;&#x2F;code&gt; socket.&lt;&#x2F;p&gt;
&lt;p&gt;Clients and Workers use the &lt;code&gt;DEALER&lt;&#x2F;code&gt; style socket to retrieve &amp;amp; send messages, but also identify themselves, and the server uses &lt;code&gt;ROUTER&lt;&#x2F;code&gt;. The identity is included as the first ZeroMQ multipart frame when it is received and so can be used to route messages back to the appropriate place.&lt;&#x2F;p&gt;
&lt;p&gt;The messages are serialised on the wire as &lt;a href=&quot;https:&#x2F;&#x2F;cbor.io&#x2F;&quot;&gt;CBOR&lt;&#x2F;a&gt; using &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;serde_cbor&quot;&gt;serde_cbor&lt;&#x2F;a&gt;.  CBOR was chosen because it allows for the message type to be flexible &amp;amp; there are plenty of implementations in other languages.  JSON could be used as well, as arguably the support for JSON is much higher, but would mean larger message sizes. &lt;&#x2F;p&gt;
&lt;p&gt;With serde it&#x27;s pretty easy to adjust what serialisation is used, so some experimentation could be worthwhile.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-job-structs&quot;&gt;The Job Structs&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;a09ebcaff164c2153cdceba0031dbfb7caa1ea3b&#x2F;src&#x2F;lib.rs#L42-L50&quot;&gt;&lt;code&gt;Job&lt;&#x2F;code&gt; struct&lt;&#x2F;a&gt; is defined as follows (with the &lt;code&gt;Status&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;Priority&lt;&#x2F;code&gt; enums listed too):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Job {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; ID of the Job so it can be tracked
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Username of who submitted the job
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: String, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Name of the job&#x2F;worker, `rendition`, etc..
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Uuid, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Unique ID of the asset
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Value,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Any parameters of the job in question
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Priority, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The priority of the job
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Status,&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The status of the job
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The job has a current status which starts with &lt;code&gt;Queued&lt;&#x2F;code&gt;, goes to &lt;code&gt;Processing&lt;&#x2F;code&gt; when it is active and then marked as either &lt;code&gt;Completed&lt;&#x2F;code&gt; or &lt;code&gt;Failed&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Status {
    Queued,
    Processing,
    Completed,
    Failed,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The priority is a simple 3-tier system of &lt;code&gt;High&lt;&#x2F;code&gt;, &lt;code&gt;Normal&lt;&#x2F;code&gt; &amp;amp; &lt;code&gt;Low&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Priority {
    High,
    Normal,
    Low,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;message-types&quot;&gt;Message types&lt;&#x2F;h3&gt;
&lt;p&gt;Messages are split up based upon who the destination is with a shared &lt;code&gt;Hello&lt;&#x2F;code&gt; message that can be serialised as any enum:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;ServerMessage {
    Hello,
    Request(JobRequest),
    Completed(Job),
    Failed(Job, String),
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;ClientMessage {
    Hello,
    Acknowledged(Job),
}

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Serialize, Deserialize, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;WorkerMessage {
    Hello,
    Order(Job),
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The  &lt;code&gt;JobRequest&lt;&#x2F;code&gt; is very similar to a &lt;code&gt;Job&lt;&#x2F;code&gt; but does not have an allocated id or status yet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;JobRequest {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;username&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: String,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;uuid&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Uuid,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;params&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Value,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;priority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Priority,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-params-value&quot;&gt;The Params Value&lt;&#x2F;h3&gt;
&lt;p&gt;One thing to note is the &lt;code&gt;params&lt;&#x2F;code&gt; is of the type &lt;code&gt;serde_json::Value&lt;&#x2F;code&gt;.  This is really to allow the greatest flexibility into what parameters are sent with each job &amp;amp; also to have it persist to PostgreSQL as a &lt;code&gt;jsonb&lt;&#x2F;code&gt; column.&lt;&#x2F;p&gt;
&lt;p&gt;Alternatively, a tighter &lt;code&gt;enum&lt;&#x2F;code&gt; could be used for different job names if you knew ahead of time the jobs that will be requested.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;serialisation-helpers&quot;&gt;Serialisation helpers&lt;&#x2F;h3&gt;
&lt;p&gt;To reduce some of the repetitiveness, there is a serialisation helper which simply serialises to &lt;code&gt;CBOR&lt;&#x2F;code&gt; for any struct that implements &lt;code&gt;Serialize&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;ToMpart {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_mpart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;Multipart, Error&amp;gt;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;Message, Error&amp;gt;;
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;T: serde::ser::Serialize&amp;gt; ToMpart &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;T {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_mpart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;Multipart, Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bytes = serde_cbor::to_vec(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;

        Ok(Multipart::from(vec![&amp;amp;bytes]))
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;to_msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;Message, Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bytes = serde_cbor::to_vec(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;

        Ok(Message::from(&amp;amp;bytes))
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;client-requests&quot;&gt;Client Requests&lt;&#x2F;h2&gt;
&lt;p&gt;Clients can send requests by constructing job requests and sending them to the server.  They just need to construct the &lt;code&gt;Request&lt;&#x2F;code&gt; enum and send it on the wire:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; send, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; recv) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dealer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;config.job_address)?
    .split::&amp;lt;Multipart&amp;gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; job = JobRequest {
    name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
    username: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
    params: Value::Null,
    uuid: Uuid::new_v4(),
    priority: PriorityLow,
};

send.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ServerMessage::Request(job).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_mpart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()?).await?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;worker-processing&quot;&gt;Worker Processing&lt;&#x2F;h2&gt;
&lt;p&gt;For workers doing the work, they should do something &amp;amp; then return whether it&#x27;s failed or completed.&lt;&#x2F;p&gt;
&lt;p&gt;To make this easier, a &lt;code&gt;Worker&lt;&#x2F;code&gt; trait is implemented.  Since some work will be async &amp;amp; some not, we want our trait to be async-capable.  At the writing of this article you can&#x27;t have &lt;code&gt;async&lt;&#x2F;code&gt; in trait definitions, but there is the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;async-trait&quot;&gt;async_trait&lt;&#x2F;a&gt; crate that allows you to decorate a trait definition and do what we&#x27;re after.&lt;&#x2F;p&gt;
&lt;p&gt;For errors we&#x27;re going to use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;anyhow&quot;&gt;anyhow&lt;&#x2F;a&gt; crate, but a more generic error approach could be used with a bit of a refactor.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;async_trait&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Worker: Sized {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JOB_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Job) -&amp;gt; Result&amp;lt;(), Error&amp;gt;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The implementation of this trait means that you can do lots within the &lt;code&gt;process&lt;&#x2F;code&gt; body and simplifies it.&lt;&#x2F;p&gt;
&lt;p&gt;An original version had the &lt;code&gt;process&lt;&#x2F;code&gt; method accept &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;, but that caused some contention when trying to process jobs concurrently.  Instead you&#x27;ll need some interior mutability if you need to provide any mutable references to &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;As an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;worker.rs#L82-L94&quot;&gt;example&lt;&#x2F;a&gt;, the test worker will simply wait for 100 milliseconds and then fail every 12th job based upon the id:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Worker &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;TestWorker {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JOB_NAME&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;&amp;#39;static str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;

    async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Job) -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delay_for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;100&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)).await;
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; job.id % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;12 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(anyhow!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Simulating failure&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;));
        }

        Ok(())
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-work-method&quot;&gt;The Work Method&lt;&#x2F;h3&gt;
&lt;p&gt;There is another method, &lt;code&gt;work&lt;&#x2F;code&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;worker.rs#L16&quot;&gt;on the trait&lt;&#x2F;a&gt; which sets up &amp;amp; hides some of the complexity away of getting a worker to listen for requests coming through.   This is plumbing to make it easy to run a &lt;code&gt;Worker&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job_address&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
    ...
} 
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can &lt;code&gt;await&lt;&#x2F;code&gt; this method for anything that implements &lt;code&gt;Worker&lt;&#x2F;code&gt; to have it process incoming requests:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;jobq::worker::{Worker, TestWorker};

tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(err) = TestWorker.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;worker_config.job_address).await {
        error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
    }
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Under the hood it uses the job address to communicate with a Server and glues up some requests&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;worker.rs#L20-L23&quot;&gt;it creates a dealer socket&lt;&#x2F;a&gt;, setting the identity accordingly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; send_skt, recv) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;dealer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;set_identity&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(job_name.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_bytes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;job_address)?
    .split::&amp;lt;Multipart&amp;gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;As ZeroMQ sockets are &lt;code&gt;Send&lt;&#x2F;code&gt; but not &lt;code&gt;Sync&lt;&#x2F;code&gt;, we spin up a background task connected by an &lt;code&gt;unbounded&lt;&#x2F;code&gt; queue which allows the sender to be cloned.  This allows both heartbeats to be sent every 10 seconds from a background task &amp;amp; also send results of processing:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(send, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; recv_skt) = unbounded::&amp;lt;ServerMessage&amp;gt;();

tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(jobq_message) = recv_skt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().await {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(msg) = jobq_message.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_mpart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(err) = send_skt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(msg).await {
                error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error sending message:{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
            }
        }
    }
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;worker.rs#L39-L46&quot;&gt;10 second heartbeat&lt;&#x2F;a&gt; is similiarly set up as a separate task:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;loop &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(err) = ping_sender.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ServerMessage::Hello).await {
            error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error:{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
        };
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;delay_for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Duration::from_millis(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)).await;
    }
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is then a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;worker.rs#L48-L75&quot;&gt;big combinator statement&lt;&#x2F;a&gt; which in effect listens for job requests &amp;amp; then runs them in parallel:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;recv.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;filter_map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; val
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Error::from)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| serde_cbor::from_slice(&amp;amp;msg[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Error::from))
    {
        Ok(WorkerMessage::Order(job)) =&amp;gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Some(job)),
        Ok(WorkerMessage::Hello) =&amp;gt; {
            debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Pong: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, job_type);
        }
        Err(err) =&amp;gt; {
            error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error decoding message:{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
        }
    }

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;ready&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(None);
})
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;process&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(job.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()), send.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(), job))
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each_concurrent&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(None, |(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mut send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; server_message = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; status.await {
        Ok(()) =&amp;gt; ServerMessage::Completed(job),
        Err(err) =&amp;gt; ServerMessage::Failed(job, err.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()),
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(err) = send.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(server_message).await {
        error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error sending server message: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
    }
})
.await;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There is a bit of cloning here that could probably be avoided, but the overhead of cloning a job is not that big.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.4&#x2F;futures&#x2F;stream&#x2F;trait.StreamExt.html#method.for_each_concurrent&quot;&gt;&lt;code&gt;for_each_concurrent&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; allows the worker to run concurrently, and is one of the reasons the trait takes &lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt; rather than &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;All of this is essentially generic on the &lt;code&gt;Worker&lt;&#x2F;code&gt; trait, meaning this plumbing is handled for you when you call &lt;code&gt;work(&amp;amp;address)&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;blocking-tasks&quot;&gt;Blocking Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;Some tasks may be blocking, which is a no-no in the async world.  If one of the async worker threads is blocked then it can&#x27;t listen for more events &amp;amp; will slow things down.  Luckily tokio does provide the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.18&#x2F;tokio&#x2F;task&#x2F;fn.spawn_blocking.html&quot;&gt;&lt;code&gt;spawn_blocking&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; helper for executing blocking work on a dedicated threadpool:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; result =
   tokio::task::spawn_blocking(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;do_blocking_work&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(job));

result.await??;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The double &lt;code&gt;.await??&lt;&#x2F;code&gt; is because the &lt;code&gt;JoinHandle&lt;&#x2F;code&gt; returned from &lt;code&gt;spawn_blocking&lt;&#x2F;code&gt; itself could fail and the internal result from the closure could fail.&lt;&#x2F;p&gt;
&lt;p&gt;To control how many threads are used for blocking operations, you need to manually &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.18&#x2F;tokio&#x2F;runtime&#x2F;struct.Builder.html&quot;&gt;build your tokio run time&lt;&#x2F;a&gt;, rather than use the &lt;code&gt;tokio::main&lt;&#x2F;code&gt; macro.&lt;&#x2F;p&gt;
&lt;p&gt;The the number of blocking threads is &lt;code&gt;max_threads - core_threads&lt;&#x2F;code&gt;.  For instance, if you wanted only 2 dedicated blocking threads:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rt = tokio::runtime::Builder::new()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;threaded_scheduler&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;enable_all&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;core_threads&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;max_threads&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()?
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;the-server-loop&quot;&gt;The Server Loop&lt;&#x2F;h2&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;master&#x2F;src&#x2F;server.rs&quot;&gt;server loop&lt;&#x2F;a&gt; is the main loop responsible for coordinating tasks &amp;amp; otherwise tasks are finished in the order they are supposed to.  The server here responds to messages from the ZeroMQ socket &amp;amp; acts according to the message received.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;setup-phase&quot;&gt;Setup Phase&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L26-L36&quot;&gt;setup phase&lt;&#x2F;a&gt; involves setting up a db handle, then querying the database for any outstanding processing jobs.  This is to ensure that they don&#x27;t become stuck as part of a server restart, but can mean that there may be duplicate jobs submitted.  If your jobs provide the same outcome based upon the job at hand this isn&#x27;t a big deal, so the workers should do work that is idempotent if at all possible.&lt;&#x2F;p&gt;
&lt;p&gt;Once that is done, the server keeps an active count of jobs &amp;amp; increments&#x2F;decrements them when jobs finish&#x2F;fail or start.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;main-loop&quot;&gt;Main Loop&lt;&#x2F;h3&gt;
&lt;p&gt;The &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L38-L119&quot;&gt;main loop&lt;&#x2F;a&gt; simply waits until a message is received, and acts accordingly:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;while let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(msg) = recv.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().await? {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is the `ROUTER` socket identity
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; client_name = &amp;amp;msg[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;];
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; This is the message
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; server_msg = serde_cbor::from_slice::&amp;lt;ServerMessage&amp;gt;(&amp;amp;msg[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]);
    
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; server_msg {
        ...
    }

}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h4 id=&quot;hello-message&quot;&gt;Hello Message&lt;&#x2F;h4&gt;
&lt;p&gt;If a &lt;code&gt;Hello&lt;&#x2F;code&gt; message is received then the server will send any outstanding processing jobs it knows about:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Drain out existing processing jobs
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(jobs, outstanding): (Vec&amp;lt;Job&amp;gt;, Vec&amp;lt;Job&amp;gt;) =
    processing.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;partition&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| job.name == name);

processing = outstanding;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; job in jobs {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;handle, job, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; send).await?;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;processing&lt;&#x2F;code&gt; vec is only ever populated at &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L34&quot;&gt;server start&lt;&#x2F;a&gt;, and so should mostly be empty unless the server was restarted with jobs that were active.&lt;&#x2F;p&gt;
&lt;p&gt;After checking all this it responds back with a &lt;code&gt;Hello&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h4 id=&quot;job-request&quot;&gt;Job Request&lt;&#x2F;h4&gt;
&lt;p&gt;If a &lt;code&gt;Request&lt;&#x2F;code&gt; message comes in, the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L70&quot;&gt;server adds this to the db&lt;&#x2F;a&gt; &amp;amp; then sends an &lt;code&gt;Acknowledged&lt;&#x2F;code&gt; message &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L84-L91&quot;&gt;back to the client&lt;&#x2F;a&gt; with the populated details.  This doesn&#x27;t yet start the job however, merely it sets the job in a &lt;code&gt;Queued&lt;&#x2F;code&gt; state.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;completed&quot;&gt;Completed&lt;&#x2F;h4&gt;
&lt;p&gt;If a &lt;code&gt;Completed&lt;&#x2F;code&gt; message comes in then the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L93-L97&quot;&gt;server marks it as completed&lt;&#x2F;a&gt; decrementing the active job count.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;failed&quot;&gt;Failed&lt;&#x2F;h4&gt;
&lt;p&gt;If a &lt;code&gt;Failed&lt;&#x2F;code&gt; message comes in the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;server.rs#L98-L102&quot;&gt;server will mark the job as failed&lt;&#x2F;a&gt; and submit the reason with it, decrementing the active job count&lt;&#x2F;p&gt;
&lt;h4 id=&quot;error-deserialising&quot;&gt;Error Deserialising&lt;&#x2F;h4&gt;
&lt;p&gt;There is a possibility that a connected client could send an invalid message, so we just log with a &lt;code&gt;warn&lt;&#x2F;code&gt; level in this case, skipping the message:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; server_msg {
    ....
    Err(err) =&amp;gt; {
        warn!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Could not deserialize message:{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, err);
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;submit-tasks&quot;&gt;Submit Tasks&lt;&#x2F;h3&gt;
&lt;p&gt;After the main loop matching against the message types, the server checks to see if there are any active slots &amp;amp; if so, queries the database for any queued jobs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; If we have less active tasks lets check the queued stuff
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; active &amp;lt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.num {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jobs = handle
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_queued_jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.num as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;- active as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
        .await?;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; job in jobs {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send_job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;handle, job, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; send).await?;
        active = active + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    }
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;After this processing, the server then waits again for the next message.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;database-persistence&quot;&gt;Database Persistence&lt;&#x2F;h2&gt;
&lt;p&gt;One of the requirements is ensuring that jobs stay around and are persisted somewhere.   The prototype uses &lt;a href=&quot;https:&#x2F;&#x2F;www.postgresql.org&#x2F;&quot;&gt;PostgreSQL&lt;&#x2F;a&gt; to do this.&lt;&#x2F;p&gt;
&lt;p&gt;As this is async, we&#x27;ll use &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-postgres&quot;&gt;tokio-postgres&lt;&#x2F;a&gt; to perform updates.  tokio postgres has some &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio-postgres&#x2F;0.5.3&#x2F;tokio_postgres&#x2F;&quot;&gt;nice docs&lt;&#x2F;a&gt; to get us started, so we will use their example to build a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;a09ebcaff164c2153cdceba0031dbfb7caa1ea3b&#x2F;src&#x2F;db.rs&quot;&gt;database handler&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tokio_postgres::{NoTls, Error};

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; By default, tokio_postgres uses the tokio crate as its runtime.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Connect to the database.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(client, connection) =
        tokio_postgres::connect(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;host=localhost user=postgres&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, NoTls).await?;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; The connection object performs the actual communication with the database,
    &#x2F;&#x2F; so spawn it off to run on its own.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(e) = connection.await {
            eprintln!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;connection error: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e);
        }
    });

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Now we can execute a simple statement that just returns its parameter.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rows = client
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;SELECT $1::TEXT&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;amp;[&amp;amp;&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;])
        .await?;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; And then check that we got back the same string we sent over.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; value: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= rows[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;].&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    assert_eq!(value, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;hello world&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;enums-and-postgres-types&quot;&gt;Enums and Postgres Types&lt;&#x2F;h3&gt;
&lt;p&gt;You can use the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;postgres-types&quot;&gt;&lt;code&gt;postgres_types&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; crate to save simple enums to a table.&lt;&#x2F;p&gt;
&lt;p&gt;So the &lt;code&gt;Priority&lt;&#x2F;code&gt; struct can be persisted to the db like so:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Priority&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; enum (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;High&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Normal&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Low&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;a-simple-migration&quot;&gt;A Simple Migration&lt;&#x2F;h3&gt;
&lt;p&gt;Hopefully our schema never changes.. Right?&lt;&#x2F;p&gt;
&lt;p&gt;Well, in the prototype it won&#x27;t. So we can simply embed an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;master&#x2F;src&#x2F;setup.sql&quot;&gt;SQL script&lt;&#x2F;a&gt; to run when the a db handler &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;a09ebcaff164c2153cdceba0031dbfb7caa1ea3b&#x2F;src&#x2F;db.rs#L13-L27&quot;&gt;starts up&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;DbHandle {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Arc&amp;lt;Client&amp;gt;,
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;DbHandle {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;url&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(client, connection) = tokio_postgres::connect(&amp;amp;url, NoTls).await?;

        tokio::spawn(async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(e) = connection.await {
                error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;connection error: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e);
            }
        });

        client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;batch_execute&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(include_str!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;setup.sql&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)).await?;

        Ok(DbHandle {
            client: Arc::new(client),
        })
    }
    ...
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This &lt;code&gt;setup.sql&lt;&#x2F;code&gt; script should be designed to run more than once, but skip the parts that it&#x27;s already done.  There are a couple tricks to do this, but obviously doesn&#x27;t work if you are adding&#x2F;removing columns from a table etc..&lt;&#x2F;p&gt;
&lt;p&gt;For the enum types, you can just check the &lt;code&gt;pg_type&lt;&#x2F;code&gt; to make sure that they exist &amp;amp; if not add them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;IF NOT EXISTS (&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;SELECT &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;FROM&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pg_type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;WHERE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; typname = &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;THEN
    CREATE TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;Status&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;as&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; enum (&amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Queued&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Processing&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Completed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;, &amp;#39;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;#39;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;END&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; IF
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the table &amp;amp; indexes you can do a &lt;code&gt;CREATE &amp;lt;blah&amp;gt; IF NOT EXISTS&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;CREATE INDEX &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;IF&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; NOT EXISTS status_idx &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ON&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jobq (
    status
);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This won&#x27;t error out if the index&#x2F;table already exists, meaning you&#x27;re safe to run the &lt;code&gt;setup.sql&lt;&#x2F;code&gt; multiple times!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;getting-jobs-from-the-db&quot;&gt;Getting jobs from the DB&lt;&#x2F;h3&gt;
&lt;p&gt;Querying for jobs is quite simple, you just select the columns you want and do a &lt;code&gt;get()&lt;&#x2F;code&gt; or &lt;code&gt;try_get()&lt;&#x2F;code&gt; on them:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;DbHandle {
    ....
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_queued_jobs&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;num&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;Vec&amp;lt;Job&amp;gt;, Error&amp;gt; {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;select 
                        id,
                        name,
                        username,
                        uuid,
                        params,
                        priority,
                        status
                     from jobq
                     where 
                        status = &amp;#39;Queued&amp;#39;
                     order by
                     priority asc, time asc
                     limit $1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jobs = Vec::new();

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; row in result {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; id = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; name = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; username = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; uuid = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; params = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; priority = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;5&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; status = row.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;try_get&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;

            jobs.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;({
                Job {
                    id,
                    username,
                    name,
                    uuid,
                    params,
                    priority,
                    status,
                }
            });
        }

        Ok(jobs)
    }
    ...
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There are a number of other methods as &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;db.rs#L29&quot;&gt;complete_job&lt;&#x2F;a&gt;, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;db.rs#L37&quot;&gt;fail_job&lt;&#x2F;a&gt; that handle the SQL stuff &amp;amp; make it simple for the Server to use.&lt;&#x2F;p&gt;
&lt;p&gt;Keeping things persisted in the database means we can use standard SQL tools to introspect the job queue and see where it&#x27;s at.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;recording-the-job-duration&quot;&gt;Recording the job duration&lt;&#x2F;h3&gt;
&lt;p&gt;The duration of the job is recorded when the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;jobq&#x2F;blob&#x2F;2028ea12388bd077056d984016ecf46c88e6626c&#x2F;src&#x2F;db.rs#L29-L35&quot;&gt;job is finished&#x2F;failed&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;complete_job&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;id&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; query = &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;update jobq set status = &amp;#39;Completed&amp;#39;, duration = extract(epoch from now() - &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;time&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;\&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;) where id = $1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;query&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(query, &amp;amp;[&amp;amp;id]).await?;

    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This could&#x27;ve been done inside rust as well using &lt;code&gt;Instant&lt;&#x2F;code&gt; but would require a bit more state to be handled in the Server.  I&#x27;ve elected here to use a PostgreSQL solution instead to lean on the db.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;running-the-example&quot;&gt;Running the example&lt;&#x2F;h2&gt;
&lt;p&gt;The example starts the test worker, a server and a client to submit 500 simple jobs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i in &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;500 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; priority = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i % &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;== &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Priority::High
    } &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;else &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        Priority::Normal
    };

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; job = JobRequest {
        name: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        username: &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test_client&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(),
        params: Value::Null,
        uuid: Uuid::new_v4(),
        priority,
    };

    send.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(ServerMessage::Request(job).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_mpart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()?).await?;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running with &lt;code&gt;cargo run&lt;&#x2F;code&gt; you will see the output after some time, with the simulated failures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2020-04-14 16:04:33 DEBUG jobq         &amp;gt; Message:Acknowledged(Job { id: 2999, username: &amp;quot;test_client&amp;quot;, name: &amp;quot;test&amp;quot;, uuid: fe6e21fc-8064-4c9a-965d-b1d124f2416d, params: Null, priority: High, status: Queued })
2020-04-14 16:04:33 DEBUG jobq::server &amp;gt; New: Job { id: 3000, username: &amp;quot;test_client&amp;quot;, name: &amp;quot;test&amp;quot;, uuid: d20b4e9b-477b-45ca-9a6a-1f6423378779, params: Null, priority: Normal, status: Queued }
2020-04-14 16:04:33 DEBUG jobq         &amp;gt; Message:Acknowledged(Job { id: 3000, username: &amp;quot;test_client&amp;quot;, name: &amp;quot;test&amp;quot;, uuid: d20b4e9b-477b-45ca-9a6a-1f6423378779, params: Null, priority: Normal, status: Queued })
2020-04-14 16:04:39 WARN  jobq::server &amp;gt; Job failed: 3000, Reason: Simulating failure
2020-04-14 16:04:39 WARN  jobq::server &amp;gt; Job failed: 2988, Reason: Simulating failure
2020-04-14 16:04:39 WARN  jobq::server &amp;gt; Job failed: 2976, Reason: Simulating failure
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can also run some simple stats directly against the db to see how long things have taken (hopefully ~100ms):&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;select &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;avg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(duration) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;from&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; jobq;

    avg     
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;------------
 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10634147&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; row)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;I hope for anyone new that this article will help dip their feet into the waters of rust and async to see what can be built.&lt;&#x2F;p&gt;
&lt;p&gt;Taking a few libraries and gluing them together we can get a pretty decent, albeit rough, outline of a background job queue.  The new &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; ecosystem while embryonic already has the tools there to build some cool stuff.&lt;&#x2F;p&gt;
&lt;p&gt;There will be a separate article around the release of &lt;code&gt;tmq&lt;&#x2F;code&gt; version &lt;code&gt;0.2.0&lt;&#x2F;code&gt; and some of the changes that have been made, but thought it might be great to provide a good example of working code before getting aroudn to that.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Handling Breaking API Changes</title>
                <pubDate>Mon, 03 Feb 2020 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/breaking-api-changes/</link>
                <guid>https://cetra3.github.io/blog/breaking-api-changes/</guid>
                <description>&lt;p&gt;While upgrading dependencies (basically deleting &lt;code&gt;Cargo.lock&lt;&#x2F;code&gt;) in a big rust project I hit an issue.  A &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;json&#x2F;commit&#x2F;97f87f2587037dcd50b9504815ee1f1540b1c2b8&quot;&gt;new commit&lt;&#x2F;a&gt; in &lt;code&gt;serde_json&lt;&#x2F;code&gt; caused has upstream failure in another library, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;mtdowling&#x2F;jmespath.rs&#x2F;issues&#x2F;33&quot;&gt;jmespath&lt;&#x2F;a&gt;, and possibly more crates. Because these structs and enums visibility has changed, this could be interpreted as a breaking change, depending on what you consider &lt;em&gt;public&lt;&#x2F;em&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;While &lt;code&gt;jmespath&lt;&#x2F;code&gt; was doing the wrong thing here, using undocumented API, it got me thinking about what can library maintainers and library consumers do to ensure semver compatibility, and what tools are out there to assist both groups.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;what-is-semantic-versioning&quot;&gt;What is Semantic Versioning&lt;&#x2F;h2&gt;
&lt;p&gt;Semantic versioning (semver) is one standard used for version numbers which appears to have gained the most traction.   Since cargo and friends use semver to identify what versions to use, it is important to understand (excuse my pun) the semantics of what this means.&lt;&#x2F;p&gt;
&lt;p&gt;The full documentation of semver is on &lt;a href=&quot;https:&#x2F;&#x2F;semver.org&#x2F;&quot;&gt;https:&#x2F;&#x2F;semver.org&#x2F;&lt;&#x2F;a&gt;, but for brevity there are 3 numbers:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Major: Any breaking API changes&lt;&#x2F;li&gt;
&lt;li&gt;Minor: Additions of new features or functionality that are backwards compatible&lt;&#x2F;li&gt;
&lt;li&gt;Patch: Bugfixes&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;There is some interesting differences for libraries &lt;code&gt;&amp;lt; 1.0.0&lt;&#x2F;code&gt; which I was not aware of for longer than I care to admit.  Namely either minor or patch numbers can be changes as you see fit.  I.e, &lt;code&gt;0.3.0&lt;&#x2F;code&gt; could be wildly different from &lt;code&gt;0.3.1&lt;&#x2F;code&gt;, including breaking changes.&lt;&#x2F;p&gt;
&lt;p&gt;However: Cargo is &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;cargo&#x2F;reference&#x2F;specifying-dependencies.html&quot;&gt;more strict&lt;&#x2F;a&gt; than the semver documentation for &lt;code&gt;&amp;lt; 1.0.0&lt;&#x2F;code&gt; libraries:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;This compatibility convention is different from SemVer in the way it treats versions before 1.0.0. While SemVer says there is no compatibility before 1.0.0, Cargo considers &lt;code&gt;0.x.y&lt;&#x2F;code&gt; to be compatible with &lt;code&gt;0.x.z&lt;&#x2F;code&gt;, where &lt;code&gt;y ≥ z&lt;&#x2F;code&gt; and &lt;code&gt;x &amp;gt; 0&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h2 id=&quot;why-we-need-it&quot;&gt;Why we need it&lt;&#x2F;h2&gt;
&lt;p&gt;We need some way of portraying changes to an API and, while it&#x27;s not perfect, it appears to be a defacto standard which makes interoperability with other libraries and crates a lot easier.&lt;&#x2F;p&gt;
&lt;p&gt;It also gives cargo a programmatic way of finding updated versions, when it&#x27;s used appropriately.&lt;&#x2F;p&gt;
&lt;p&gt;So it is one part advertising the intent of the version and another part ensuring that things will compile if you bump up certain numbers.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-evolution-rfc&quot;&gt;API Evolution RFC&lt;&#x2F;h2&gt;
&lt;p&gt;The Semver website is very general in its language and isn&#x27;t specific to rust.  There is, however, a great RFC that has some excellent guidelines both for the language itself &amp;amp; for library maintainers: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;1105-api-evolution.md&quot;&gt;RFC 1105: API Evolution&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Here are a couple of excerpts:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;major-change-going-from-stable-to-nightly&quot;&gt;Major change: going from stable to nightly&lt;&#x2F;h4&gt;
&lt;p&gt;Changing a crate from working on stable Rust to &lt;em&gt;requiring&lt;&#x2F;em&gt; a nightly is
considered a breaking change. That includes using &lt;code&gt;#[feature]&lt;&#x2F;code&gt; directly, or
using a dependency that does so. Crate authors should consider using Cargo
&lt;a href=&quot;http:&#x2F;&#x2F;doc.crates.io&#x2F;manifest.html#the-%5Bfeatures%5D-section&quot;&gt;&amp;quot;features&amp;quot;&lt;&#x2F;a&gt; for
their crate to make such use opt-in.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;blockquote&gt;
&lt;h4 id=&quot;major-change-renaming-moving-removing-any-public-items&quot;&gt;Major change: renaming&#x2F;moving&#x2F;removing any public items.&lt;&#x2F;h4&gt;
&lt;p&gt;Although renaming an item might seem like a minor change, according to the
general policy design this is not a permitted form of breakage: it&#x27;s not
possible to annotate code in advance to avoid the breakage, nor is it possible
to prevent the breakage from affecting dependencies.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;This RFC has some great advice, and I wish it was more publicly known, but seems relatively obscure.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-non-exhaustive-attribute&quot;&gt;The Non-Exhaustive Attribute&lt;&#x2F;h2&gt;
&lt;p&gt;Another RFC related to versioning is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;2008-non-exhaustive.md&quot;&gt;Non-Exhaustive&lt;&#x2F;a&gt;, which is a handy way of planning breaking changes ahead of time.  It works with enums by forcing open ended &lt;code&gt;match&lt;&#x2F;code&gt; statements, which means consumers of your enum won&#x27;t break if a new variant is introducted. It also works with structs and ensures users consuming libraries can&#x27;t create them.&lt;&#x2F;p&gt;
&lt;p&gt;This was recently &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2019&#x2F;12&#x2F;19&#x2F;Rust-1.40.0.html&quot;&gt;stabilised in Rust 1.40&lt;&#x2F;a&gt; so it&#x27;s a rather new feature of the language (on a side note: it&#x27;s not easy to find when a particular RFC is stabilised, it would be great to have this reflected in the RFC somewhere).&lt;&#x2F;p&gt;
&lt;p&gt;As an example if you have an enum like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;non_exhaustive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Error {
    Message(String),
    Other,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You would need to &lt;code&gt;match&lt;&#x2F;code&gt; against the enum like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;match&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; error {
    Message(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; s) =&amp;gt; ...,
    Other =&amp;gt; ...,
    _ =&amp;gt; ...,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Your library could then introduce a new variant, which wouldn&#x27;t break the existing consumer:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;non_exhaustive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub enum &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Error {
    Message(String),
    IOError,
    Other,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;other-tools&quot;&gt;Other Tools&lt;&#x2F;h2&gt;
&lt;p&gt;There have been some tools to both manage breaking changes in the past, a lot of the things I found were unmaintained or not in active use.  There might also be some great language features that I haven&#x27;t discovered yet that crate authors are already using.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;the-semver-trick&quot;&gt;The Semver Trick&lt;&#x2F;h3&gt;
&lt;p&gt;Documented here is the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;dtolnay&#x2F;semver-trick&quot;&gt;semver trick&lt;&#x2F;a&gt;, which touts to be able to assist in this with downstream dependencies.&lt;&#x2F;p&gt;
&lt;p&gt;There is mention of a &lt;code&gt;libcpocalypse&lt;&#x2F;code&gt;, which does not sound nice and may happen again if there is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;libc&#x2F;issues&#x2F;547&quot;&gt;major version increase&lt;&#x2F;a&gt; to &lt;code&gt;libc&lt;&#x2F;code&gt;.  I tried to find some information about where this had happened before but searching for the term circles back to this project and doesn&#x27;t give a great overview of the pains users had to go through before.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-semverver&quot;&gt;Rust Semverver&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-dev-tools&#x2F;rust-semverver&quot;&gt;rust-semverver&lt;&#x2F;a&gt; is a Google Summer of Code Project which checks semver compliance with rust crates by using a novel approach:&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;The approach taken is to compile both versions of the crate to rlibs and to link them as dependencies of a third, empty, dummy crate. Then, a custom compiler driver is run on the said dummy and all necessary analysis is performed in that context, where type information and other resources are available.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;semantic-rs&quot;&gt;Semantic-RS&lt;&#x2F;h3&gt;
&lt;p&gt;An existing tool called &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;semantic-rs&#x2F;semantic-rs&quot;&gt;semantic-rs&lt;&#x2F;a&gt; touts to be able to do this for your crates automatically.  This doesn&#x27;t appear to have any changes for over a year, but does have an active issue register, but no PRs have been accepted for a while.  It is highly opinionated as well, and may not be appropriate to bolt on to an existing library.  This looks like something you need to use from the beginning as well.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;rust-breaking-changes&quot;&gt;Rust Breaking Changes&lt;&#x2F;h3&gt;
&lt;p&gt;This also doesn&#x27;t appear to be maintained, but was an automatic listing of breaking changes to rust: &lt;a href=&quot;https:&#x2F;&#x2F;killercup.github.io&#x2F;bitrust&#x2F;&quot;&gt;https:&#x2F;&#x2F;killercup.github.io&#x2F;bitrust&#x2F;&lt;&#x2F;a&gt;.   I do wonder though how many of those changes are internal, as I don&#x27;t believe there have been many external breaking changes.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;future-proofing&quot;&gt;Future Proofing&lt;&#x2F;h3&gt;
&lt;p&gt;There is a chapter of the &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;about.html&quot;&gt;Rust API Guidelines&lt;&#x2F;a&gt; which deals with how to future proof an API, but as with other tools I have found does not appear to be updated in &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;api-guidelines&#x2F;commits&#x2F;master&#x2F;src&#x2F;future-proofing.md&quot;&gt;quite a while&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Future Proofing&lt;&#x2F;strong&gt;: &lt;a href=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;future-proofing.html&quot;&gt;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;api-guidelines&#x2F;future-proofing.html&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;While there has been a &lt;a href=&quot;https:&#x2F;&#x2F;blog.rust-lang.org&#x2F;2018&#x2F;03&#x2F;12&#x2F;roadmap.html#library-improvements&quot;&gt;historic push to get crates to 1.0.0&lt;&#x2F;a&gt;, There does not appear to be much in the way of modern tooling in order to help with this and the focus of previous efforts see them moving elsewhere.&lt;&#x2F;p&gt;
&lt;p&gt;With more libraries reaching &lt;code&gt;1.0.0&lt;&#x2F;code&gt; I think it&#x27;s important to introduce more safety nets for library authors and consumers.  As an idea, we can potentially see whether a crate has breaking change through lints etc.. so why don&#x27;t we do that when we publish to crates.io?&lt;&#x2F;p&gt;
&lt;p&gt;There is a lot of room for improvement here, and as new users come on board and new companies look at adopting, it&#x27;s important that the stability of semver is maintained.  I still think the way that cargo handles this is much better than other ecosystems.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Lessons learnt updating a library to std::future</title>
                <pubDate>Wed, 22 Jan 2020 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/mpart-async-0-3-0/</link>
                <guid>https://cetra3.github.io/blog/mpart-async-0-3-0/</guid>
                <description>&lt;p&gt;With the new &lt;code&gt;std::future&lt;&#x2F;code&gt; way of doing things and &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&quot;&gt;tokio&lt;&#x2F;a&gt; slowly reaching maturation, it&#x27;s time to look at updating the libraries out there that are using &lt;em&gt;the old ways&lt;&#x2F;em&gt;.  For one of my libraries, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt;, a Tokio ZeroMQ library, there is some &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;pull&#x2F;5&quot;&gt;awesome work already done&lt;&#x2F;a&gt; to get this updated.&lt;&#x2F;p&gt;
&lt;p&gt;But, I thought it pertinent to at least get my feet in the water to see how hard it would be, from a library maintainer perspective, to update to &lt;code&gt;std::future&lt;&#x2F;code&gt;.  For this effort, I chose my small library: &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mpart-async&quot;&gt;mpart-async&lt;&#x2F;a&gt;.   You can see the changes I have made by comparing the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;compare&#x2F;0.2.1...0.3.0&quot;&gt;versions&lt;&#x2F;a&gt; here.  This blog is a small collection of notes &amp;amp; gotches I found when porting code across.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;mpart-async&lt;&#x2F;code&gt; is a &lt;em&gt;mostly&lt;&#x2F;em&gt; agnostic library for client side &lt;code&gt;multipart&#x2F;form-data&lt;&#x2F;code&gt; requests.  There are existing libraries out there, like &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;multipart&quot;&gt;multipart&lt;&#x2F;a&gt;, but I found the API a little unwieldy for my taste (That: and async support is &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;abonander&#x2F;multipart-async&quot;&gt;still in alpha&lt;&#x2F;a&gt; according to the readme). I wanted something that worked, and was simple, but didn&#x27;t offer an opinion on the web client. I use both the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&#x2F;tree&#x2F;master&#x2F;awc&quot;&gt;actix client&lt;&#x2F;a&gt; &amp;amp;  &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;hyper&quot;&gt;hyper&lt;&#x2F;a&gt; to make multipart requests depending on the project.&lt;&#x2F;p&gt;
&lt;p&gt;The challenge is that with multipart requests you mostly have fields &amp;amp; binary files.  For binary files, you can appreciate, should not be buffered entirely in memory, but streamed out as the bytes become available.  So &lt;code&gt;mpart-async&lt;&#x2F;code&gt; works with multiple internal streams of files and also provides a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;blob&#x2F;981ba0437e19fa47f94a913cf9aaa4717fbe12bc&#x2F;src&#x2F;filestream.rs&quot;&gt;convenience wrapper&lt;&#x2F;a&gt; (if using tokio) for sending files given a path.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;a-new-example&quot;&gt;A New Example&lt;&#x2F;h2&gt;
&lt;p&gt;All these changes to support &lt;code&gt;async fn&lt;&#x2F;code&gt; and is it actually easier to consume&#x2F;use async libraries?&lt;&#x2F;p&gt;
&lt;p&gt;Given the &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;hyper&quot;&gt;hyper&lt;&#x2F;a&gt; example, I would say yes.&lt;&#x2F;p&gt;
&lt;p&gt;Compare the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;blob&#x2F;981ba0437e19fa47f94a913cf9aaa4717fbe12bc&#x2F;examples&#x2F;hyper.rs&quot;&gt;new example&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tokio&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
async &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Error&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Setup a mock server to accept connections.
    &#x2F;&#x2F;....

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; client = Client::new();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mpart = MultipartRequest::default();

    mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; request = Request::post(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONTENT_TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
            format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;multipart&#x2F;form-data; boundary=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_boundary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()),
        )
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Body::wrap_stream(mpart))?;

    client.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(request).await?;

    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;With the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;blob&#x2F;c928f015fa31cd57533d4ba43551a9a96b61b0a2&#x2F;examples&#x2F;hyper.rs&quot;&gt;older one&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; current_thread::Runtime can&amp;#39;t be used because of the blocking file operations
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rt = Runtime::new().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;new rt&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Setup a mock server to accept connections.
    &#x2F;&#x2F;....

    &#x2F;&#x2F; Open `Cargo.toml` file and create a request
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; request = File::open(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; A Stream of BytesMut decoded from an AsyncRead
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; framed = FramedRead::new(file, BytesCodec::new());

            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mpart = MultipartRequest::default();
            mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_field&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;bar&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
            mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;foofile&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Cargo.toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;application&#x2F;toml&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;,
                framed.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| b.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;freeze&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()),
            );
            Request::post(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;http:&#x2F;&#x2F;localhost:3000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;header&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONTENT_TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
                    format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;multipart&#x2F;form-data; boundary=&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, mpart.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_boundary&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()),
                ).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Body::wrap_stream(mpart))
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_future&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e))
        });

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Send request
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; task = request.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; client = hyper::Client::new();
        client
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(request)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;response&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
                response
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into_body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| format!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e))
                    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;body&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(data) = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;::from_utf8(&amp;amp;body) {
                            println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Response: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, data);
                        }
                        Ok(())
                    })
            })
    });

    rt.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;block_on&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(task).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;request failed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;While there are still a few warts (such as having to manually add the boundary header), I find the code a lot more readable and easy to follow, rather than your standard combinator paths.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;no-more-error-associated-type&quot;&gt;No more &lt;code&gt;Error&lt;&#x2F;code&gt; Associated Type&lt;&#x2F;h2&gt;
&lt;p&gt;The most drastic change to the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait is that there is no longer an &lt;code&gt;Error&lt;&#x2F;code&gt; associated type.  The old &lt;code&gt;Stream&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;Future&lt;&#x2F;code&gt; traits had both &lt;code&gt;Item&lt;&#x2F;code&gt; and &lt;code&gt;Error&lt;&#x2F;code&gt;, as it assumed that streams were always going to be fallible.  The new traits do away with the &lt;code&gt;Error&lt;&#x2F;code&gt; associated type.  Instead, if you want your &lt;code&gt;Stream&lt;&#x2F;code&gt; to possibly be an error then you need to return a &lt;code&gt;Result&lt;&#x2F;code&gt; as your &lt;code&gt;Item&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;For the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait, the method you implement has changed to &lt;code&gt;poll_next&lt;&#x2F;code&gt; and uses the &lt;code&gt;std::task::Poll&lt;&#x2F;code&gt; enum as a return type.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Poll&lt;&#x2F;code&gt; enum did feel a little inside out when I started using it, but makes sense in terms of there being no &lt;code&gt;Error&lt;&#x2F;code&gt; type.  You don&#x27;t return a &lt;code&gt;Result&amp;lt;Async&amp;lt;Option&amp;gt;, _&amp;gt;...&lt;&#x2F;code&gt; you instead return a &lt;code&gt;Poll&amp;lt;Option&amp;lt;Result&amp;lt;_,_&amp;gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Generally, this means if you wrote this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(Async::Ready(Some(bytes)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You instead will return:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Poll::Ready(Some(Ok(bytes)))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;streamext-traits-and-friends&quot;&gt;&lt;code&gt;StreamExt&lt;&#x2F;code&gt; traits and friends&lt;&#x2F;h2&gt;
&lt;p&gt;As a consequence of no &lt;code&gt;Error&lt;&#x2F;code&gt; associated type, and an example of different ergonomics, if you are dealing with &lt;code&gt;Result&lt;&#x2F;code&gt; items, you may want to use the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.1&#x2F;futures&#x2F;stream&#x2F;trait.TryStreamExt.html&quot;&gt;TryStreamExt&lt;&#x2F;a&gt; trait instead of &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.1&#x2F;futures&#x2F;stream&#x2F;trait.StreamExt.html&quot;&gt;StreamExt&lt;&#x2F;a&gt;.  They are basically the same trait but one deals with &lt;code&gt;Result&lt;&#x2F;code&gt; a bit more nicely.  I&#x27;m not sure whether a simpler solution will be possible with higher kinded types in the future, but for now it is a tiny bit more complex than futures 0.1.&lt;&#x2F;p&gt;
&lt;p&gt;Interestingly, the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.1&#x2F;futures&#x2F;stream&#x2F;index.html&quot;&gt;index page&lt;&#x2F;a&gt; for stream docs doesn&#x27;t currently mention that the &lt;code&gt;TryStreamExt&lt;&#x2F;code&gt; trait exists &amp;amp; I only found out about it by asking questions in the &lt;a href=&quot;https:&#x2F;&#x2F;discord.gg&#x2F;tokio&quot;&gt;discord chat&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;But wait, there is also &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.10&#x2F;tokio&#x2F;stream&#x2F;trait.StreamExt.html&quot;&gt;StreamExt&lt;&#x2F;a&gt; from tokio  which is subtly different, but does as of &lt;code&gt;0.2.10&lt;&#x2F;code&gt; allow you to run &lt;code&gt;collect()&lt;&#x2F;code&gt; on &lt;code&gt;Result&amp;lt;Bytes, _&amp;gt;&lt;&#x2F;code&gt; item streams.&lt;&#x2F;p&gt;
&lt;p&gt;When would you use either &lt;code&gt;StreamExt&lt;&#x2F;code&gt;?  I would say that if you want to be more general, you should probably use the &lt;code&gt;futures&lt;&#x2F;code&gt;  implementation.  Bearing in mind you can&#x27;t run &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.3.1&#x2F;futures&#x2F;stream&#x2F;trait.TryStreamExt.html#method.try_collect&quot;&gt;&lt;code&gt;try_collect()&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; on &lt;code&gt;Result&amp;lt;Bytes, _&amp;gt;&lt;&#x2F;code&gt; at the moment due to an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;bytes&#x2F;issues&#x2F;324&quot;&gt;outstanding issue&lt;&#x2F;a&gt; with the bytes crate.  Why does this matter? Well, &lt;a href=&quot;https:&#x2F;&#x2F;hyper.rs&#x2F;&quot;&gt;hyper&lt;&#x2F;a&gt; passes around streams of &lt;code&gt;Result&amp;lt;Bytes, _&amp;gt;&lt;&#x2F;code&gt; when you are streaming a body in &amp;amp; out of a request.  Working with this particular stream signature is a bit clunky still, but I&#x27;m sure that this will be resolved in due course.&lt;&#x2F;p&gt;
&lt;p&gt;So we have:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;StreamExt&lt;&#x2F;code&gt; from &lt;code&gt;futures&lt;&#x2F;code&gt; that works on &lt;code&gt;Stream&lt;&#x2F;code&gt; that aren&#x27;t &lt;code&gt;Result&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;TryStreamExt&lt;&#x2F;code&gt; from &lt;code&gt;futures&lt;&#x2F;code&gt; that works on &lt;code&gt;Stream&lt;&#x2F;code&gt; that are &lt;code&gt;Result&lt;&#x2F;code&gt; but doesn&#x27;t work well with &lt;code&gt;Result&amp;lt;Bytes,_&amp;gt;&lt;&#x2F;code&gt; when trying to &lt;code&gt;try_collect()&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;StreamExt&lt;&#x2F;code&gt; from &lt;code&gt;tokio&lt;&#x2F;code&gt; that works with &lt;code&gt;Result&amp;lt;Bytes,_&amp;gt;&lt;&#x2F;code&gt; and allows you to &lt;code&gt;collect()&lt;&#x2F;code&gt; to get the output but now means you have a dependency on &lt;code&gt;tokio&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;This might end up confusing more than just me, and I do hope that it&#x27;s simplified in the future.&lt;&#x2F;p&gt;
&lt;p&gt;Luckily in the core of the API I don&#x27;t need to use them, only for tests &amp;amp; filestream, which means I&#x27;m quite happy to depend on the &lt;code&gt;tokio&lt;&#x2F;code&gt; implementation.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-inner-streams-in-pin&quot;&gt;Wrapping inner streams in &lt;code&gt;Pin&lt;&#x2F;code&gt;&lt;&#x2F;h2&gt;
&lt;p&gt;I got tripped up on this for a while, and needed to again ask in chat for the answer here. If you have an inner stream and you want to call &lt;code&gt;poll_next&lt;&#x2F;code&gt; on it, you need to wrap it in a &lt;code&gt;Pin&lt;&#x2F;code&gt;, otherwise the &lt;code&gt;Stream&lt;&#x2F;code&gt; trait does not stick and you will get some gnarly error message with some weird suggestions:&lt;&#x2F;p&gt;
&lt;p&gt;The my original shot at the code was:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;stream.stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cx)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But it needs to be:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Pin::new(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; stream.stream).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;poll_next&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cx)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The compiler error message is not too helpful here, and insists I restrict &lt;code&gt;S&lt;&#x2F;code&gt; by &lt;code&gt;Stream&lt;&#x2F;code&gt;, even though it is already restricted by &lt;code&gt;Stream&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error[E0599]: no method named `poll_next` found for type `S` in the current scope
   --&amp;gt; src&#x2F;lib.rs:282:41
    |
282 |                     match stream.stream.poll_next(cx) {
    |                                         ^^^^^^^^^ method not found in `S`
    |
    = help: items from traits can only be used if the type parameter is bounded by the trait
help: the following trait defines an item `poll_next`, perhaps you need to restrict type parameter `S` with it:
    |
254 | impl&amp;lt;E, S: futures::Stream + Stream&amp;gt; Stream for MultipartRequest&amp;lt;S&amp;gt;
    |         ^^^^^^^^^^^^^^^^^^^^
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You need to make sure that your inner stream implements &lt;code&gt;Unpin&lt;&#x2F;code&gt; as well to go down this path:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;impl&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;lt;E, S&amp;gt; Stream &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;MultipartRequest&amp;lt;S&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
    S: Stream&amp;lt;Item = Result&amp;lt;Bytes, E&amp;gt;&amp;gt; + Unpin,
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;storing-the-results-from-an-async-fn-in-a-struct&quot;&gt;Storing the results from an &lt;code&gt;async fn&lt;&#x2F;code&gt; in a struct&lt;&#x2F;h2&gt;
&lt;p&gt;Some of the methods in tokio are returns from an &lt;code&gt;async fn&lt;&#x2F;code&gt; , like the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.2.10&#x2F;tokio&#x2F;fs&#x2F;struct.File.html#method.open&quot;&gt;File::open&lt;&#x2F;a&gt; method, which I use for &lt;code&gt;FileStream&lt;&#x2F;code&gt;.  I found the answer on &lt;a href=&quot;https:&#x2F;&#x2F;stackoverflow.com&#x2F;questions&#x2F;58354633&#x2F;cannot-use-impl-future-to-store-async-function-in-a-vector&quot;&gt;stack overflow&lt;&#x2F;a&gt; as to how to do this with &lt;code&gt;std::future&lt;&#x2F;code&gt;, since &lt;code&gt;async fn&lt;&#x2F;code&gt; returns an opaque type.&lt;&#x2F;p&gt;
&lt;p&gt;For the older version, the OpenFuture was a concrete type:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FileStream {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Option&amp;lt;FramedRead&amp;lt;File, BytesCodec&amp;gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: OpenFuture&amp;lt;PathBuf&amp;gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The newer version is a return from an &lt;code&gt;async fn&lt;&#x2F;code&gt; and is opaque, so we wrap it using &lt;code&gt;Box::pin&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;FileStream {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;inner&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Option&amp;lt;FramedRead&amp;lt;File, BytesCodec&amp;gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;file&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Pin&amp;lt;Box&amp;lt;dyn Future&amp;lt;Output = Result&amp;lt;File, Error&amp;gt;&amp;gt; + Send + Sync&amp;gt;&amp;gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You can then instantiate this with:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Box::pin(File::open(file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then it&#x27;s easy to call passing on the context from an existing &lt;code&gt;poll()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.file.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;poll&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(cx)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;notifying-a-task&quot;&gt;Notifying a task&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;code&gt;FileStream&lt;&#x2F;code&gt; has two stages.  One is the future to open the file. The second is streaming out the bytes of the file.  When the future resolves to open the file, I want to notify the context that it should be polled again to start streaming.&lt;&#x2F;p&gt;
&lt;p&gt;The old way of doing this was &lt;code&gt;task::current().notify()&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.inner = Some(FramedRead::new(file, BytesCodec::new()));
task::current().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;notify&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The new way appears to be using  &lt;code&gt;cx.waker().wake_by_ref()&lt;&#x2F;code&gt; where &lt;code&gt;cx&lt;&#x2F;code&gt; is the context received from the poll:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.inner = Some(FramedRead::new(file, BytesCodec::new()));
cx.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;waker&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wake_by_ref&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I say appears because the test written works without &lt;code&gt;wake_by_ref()&lt;&#x2F;code&gt; being called.  Requires a bit more investigation here I think to know exactly what&#x27;s going on.  My &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;blob&#x2F;981ba0437e19fa47f94a913cf9aaa4717fbe12bc&#x2F;src&#x2F;filestream.rs#L56&quot;&gt;simple test example&lt;&#x2F;a&gt; works either way, strangely.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;It is not too onerous to convert to &lt;code&gt;std::future&lt;&#x2F;code&gt; for an existing library.  I would assume the leap from the old &lt;code&gt;tokio-core&lt;&#x2F;code&gt; would be harder, as the changes &lt;em&gt;feel&lt;&#x2F;em&gt; mostly cosmetic here.&lt;&#x2F;p&gt;
&lt;p&gt;The omission of the &lt;code&gt;Error&lt;&#x2F;code&gt; associated type to me actually makes things less ergonomic and things a little more fragmented (as evidenced by 3 &lt;code&gt;*StreamExt&lt;&#x2F;code&gt; traits..).  I was an advocate of this initially, but there probably needs to be a bit more work in making this nicer.&lt;&#x2F;p&gt;
&lt;p&gt;There are still a lot of libraries out there that will be required to be updated, a lot of old blogs that are no longer relevant, and a lot of exploration that needs to be done to see how the async ecosystem falls out.  But considering the friction of updating is quite small, I am quitely optimistic!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>My Wishes for Rust 2020</title>
                <pubDate>Wed, 30 Oct 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/rust-2020/</link>
                <guid>https://cetra3.github.io/blog/rust-2020/</guid>
                <description>&lt;p&gt;2019 was another huge year for rust, but instead of implementing the shiny new thing, it&#x27;s been a focus on refining existing ideas.&lt;&#x2F;p&gt;
&lt;p&gt;Having being using rust professionally for over 3 years, I feel I will very soon be regailing new rust developers of the times before NLL &amp;amp; async, where we had to play &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;blob&#x2F;master&#x2F;text&#x2F;2094-nll.md#problem-case-3-conditional-control-flow-across-functions&quot;&gt;lexicon-fu&lt;&#x2F;a&gt; to get things like caches to work in a reasonable fashion, or using super dooper combinator chains and wrestling with futures types (&lt;code&gt;Either::A&#x2F;B&lt;&#x2F;code&gt; anyone?).&lt;&#x2F;p&gt;
&lt;p&gt;So I&#x27;d like to make clear my acknowledgement that I am happy with the direction that the rust language is heading in, and these requests are really nice to haves.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-future-of-futures&quot;&gt;The Future of Futures&lt;&#x2F;h2&gt;
&lt;p&gt;The async&#x2F;await is on track to be stabilised next month, which means it&#x27;s not a goal for 2020, but we have to look back to the futures-rs! There is a whole ecosystem that now needs to play catchup and I hope that it does within the year 2020.&lt;&#x2F;p&gt;
&lt;p&gt;I also really hope they start using the logo a bit more!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;rust-lang.github.io&#x2F;futures-rs&#x2F;assets&#x2F;images&#x2F;futures-rs-logo.svg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokio-version-1-0&quot;&gt;Tokio version &lt;code&gt;1.0&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;I would like to see tokio version &lt;code&gt;1.0&lt;&#x2F;code&gt; in 2020.  I would also like the core of tokio to be trimmed down immensely for inclusion as a dependency.  Just a small wish I know!&lt;&#x2F;p&gt;
&lt;p&gt;I understand the reluctance to brand it as &lt;code&gt;1.0&lt;&#x2F;code&gt; but there is already a lot of churn from the move from &lt;code&gt;tokio-core&lt;&#x2F;code&gt; last year.  This would also signal to users that it is mostly stabilised, since async&#x2F;await is dropping soon. I haven&#x27;t been following development closely to know if there are any further blockers beyond this though.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;alternatives-to-tokio&quot;&gt;Alternatives to tokio&lt;&#x2F;h3&gt;
&lt;p&gt;I&#x27;d also like to see more than one library for async reach wide use.  I&#x27;d like to be able to mix and match executors with library code, and choose an implementation.  The promise of async&#x2F;await should allow for this in theory, but we&#x27;ll have to see what it&#x27;s like in practice.&lt;&#x2F;p&gt;
&lt;p&gt;This will both add a bit of healthy competition to the ecosystem but will also prevent future design decisions from library bias.&lt;&#x2F;p&gt;
&lt;p&gt;I know that &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;async-rs&#x2F;async-std&quot;&gt;async-std&lt;&#x2F;a&gt; is a great contender here and I hope that one day I could use this as a (mostly) drop in replacement for running my futures.&lt;&#x2F;p&gt;
&lt;p&gt;This might already be possible, but I&#x27;d have no idea how to integrate this to my existing libraries (i.e, &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;mpart-async&quot;&gt;mpart-async&lt;&#x2F;a&gt;) in an agnostic fashion.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;non-async-stuff&quot;&gt;Non-Async stuff&lt;&#x2F;h3&gt;
&lt;p&gt;Some more care needs to be put into the non-async world.  There was a great thread about an &lt;a href=&quot;https:&#x2F;&#x2F;users.rust-lang.org&#x2F;t&#x2F;lightweight-alternative-for-reqwest&#x2F;33601&quot;&gt;alternative to reqwest&lt;&#x2F;a&gt; which doesn&#x27;t require the entire async stack to run.&lt;&#x2F;p&gt;
&lt;p&gt;I would also like to see the blending of async and sync code made easier. Sometimes you want to use a db pool such as diesel, and currently that is a very messy thing to do.&lt;&#x2F;p&gt;
&lt;p&gt;It would be great if that bridge was seamless and doesn&#x27;t shoot you in the foot (i.e, make it a compile time guarantee to ensure no blocking code in async).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;chat-and-community-channels&quot;&gt;Chat and Community Channels&lt;&#x2F;h2&gt;
&lt;p&gt;I really enjoyed the IRC chat room, but as &lt;a href=&quot;http:&#x2F;&#x2F;exple.tive.org&#x2F;blarg&#x2F;2019&#x2F;09&#x2F;06&#x2F;forward-motion&#x2F;&quot;&gt;Mozilla is decommissioning it&lt;&#x2F;a&gt;, it feels like there is now a massive empty hole where a good resource use to be.&lt;&#x2F;p&gt;
&lt;p&gt;This isn&#x27;t really something that the rust team themselves can do anything about, but I also don&#x27;t think fragmenting team discussions across a variety of chat platforms sets a good precedent for the greater rust community.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t have any direct qualms about using discord (which is currently recommended on the &lt;a href=&quot;http:&#x2F;&#x2F;web.archive.org&#x2F;web&#x2F;20191006130756&#x2F;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;community&quot;&gt;community page&lt;&#x2F;a&gt;) but it would be preferable if whatever was chosen was both accessible and open.  I&#x27;d love it to be &lt;a href=&quot;https:&#x2F;&#x2F;matrix.org&#x2F;&quot;&gt;matrix&lt;&#x2F;a&gt;, but &lt;a href=&quot;https:&#x2F;&#x2F;about.riot.im&#x2F;&quot;&gt;riot&lt;&#x2F;a&gt; is a bit of a clunky client, and there isn&#x27;t really a better alternative client.  Discord has much more polish.&lt;&#x2F;p&gt;
&lt;p&gt;(As an aside the fediverse stuff is pretty cool! &lt;a href=&quot;https:&#x2F;&#x2F;joinmastodon.org&#x2F;&quot;&gt;mastodon&lt;&#x2F;a&gt; and &lt;a href=&quot;https:&#x2F;&#x2F;pixelfed.org&#x2F;&quot;&gt;pixelfed&lt;&#x2F;a&gt; are great apps and I wish we saw more rusty stuff in this space)&lt;&#x2F;p&gt;
&lt;h2 id=&quot;reflecting-on-last-year-s-wishes&quot;&gt;Reflecting on Last Year&#x27;s Wishes&lt;&#x2F;h2&gt;
&lt;p&gt;My &lt;a href=&quot;..&#x2F;rust-2019&#x2F;&quot;&gt;last blog&lt;&#x2F;a&gt; I had 3 main areas of improvement that I would like to have seen a focus on.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;compiler-times-ide-support-and-rls&quot;&gt;Compiler Times, IDE Support and RLS&lt;&#x2F;h3&gt;
&lt;p&gt;This is still in flux but appears to be a step in the right direction.  move over &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rls&quot;&gt;rls&lt;&#x2F;a&gt; and welcome &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-analyzer&#x2F;rust-analyzer&quot;&gt;rust-analyzer&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;It seems the IDE story is a lot better, but still a long way off.  Who knew it could be so hard!  IntelliJ has made strides this year in making their IDE much better.  Still though, every few months I load up some of my bigger rust projects, only to have some weirdness show up.&lt;&#x2F;p&gt;
&lt;p&gt;I feel like this is very much an aspirational goal though, IDEs for all languages continue and improve to get better with time.  It&#x27;s not ever going to be the ideal of an IDE, but it&#x27;s trending towards it.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;async-await&quot;&gt;Async&#x2F;Await&lt;&#x2F;h3&gt;
&lt;p&gt;The Async&#x2F;Await story definitely improved with the imminent release (as of this blog) of &lt;code&gt;async&lt;&#x2F;code&gt; syntax landing on stable. &lt;&#x2F;p&gt;
&lt;p&gt;While there was a substantial amount of dogfooding around the syntax, I feel that the language team has settled on an appropriate solution.  It looks a bit weird at first, but the promise of having &lt;code&gt;match&lt;&#x2F;code&gt; or others use the same syntax style is intruiging.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation-churn&quot;&gt;Documentation Churn&lt;&#x2F;h3&gt;
&lt;p&gt;This is still an area of concern, but has been addressed mostly in some of the frameworks I&#x27;ve seen.  I feel like this won&#x27;t be fixed until all the ecosystem has stabilised around new language features and we land a few more &lt;code&gt;1.0&lt;&#x2F;code&gt; crates.&lt;&#x2F;p&gt;
&lt;p&gt;It&#x27;s going to be a hassle redoing examples with async keywords!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I am happy with the way things have progressed throughout 2019 and I feel that 2020 is going to be a massively exciting time for rust.&lt;&#x2F;p&gt;
&lt;p&gt;I don&#x27;t feel there is a need for another epoch just yet, considering we&#x27;re still working through the current one.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s work towards polishing the async ecosystem for this year, and hopefully we&#x27;ll have a very compelling story for everyone else to get involved.&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Face Detection with Actix Web</title>
                <pubDate>Thu, 11 Apr 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/face-detection-with-actix-web/</link>
                <guid>https://cetra3.github.io/blog/face-detection-with-actix-web/</guid>
                <description>&lt;p&gt;Last article I wrote about how to &lt;a href=&quot;https:&#x2F;&#x2F;cetra3.github.io&#x2F;blog&#x2F;face-detection-with-tensorflow-rust&#x2F;&quot;&gt;use tensorflow with rust&lt;&#x2F;a&gt;.  This time we&#x27;re going to take what we&#x27;ve built on, and serve it as an HTTP API call.  As &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&quot;&gt;Actix Web&lt;&#x2F;a&gt; is nearing its inevitable &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&#x2F;issues&#x2F;722&quot;&gt;1.0 release&lt;&#x2F;a&gt;, I thought it would be a great time to build something with it.&lt;&#x2F;p&gt;
&lt;p&gt;This article assumes you have some knowledge about &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;futures-rs&quot;&gt;Futures&lt;&#x2F;a&gt; and how they work. I will do my best to explain in simpler terms, but understanding the futures ecosystem would be quite handy to help work through this article. For this, I suggest you start with &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;tokio&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;em&gt;(Some people have suggested waiting for async&#x2F;await and friends to land before diving into Futures.  I think you should get your hands dirty now: async programming will always be challenging and the changes being introduced only affect ergonomics, not fundamentals)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Once again for the impatient, you can find the reference code here on the &lt;code&gt;actix-web&lt;&#x2F;code&gt; branch: &lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&#x2F;tree&#x2F;actix-web&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&#x2F;tree&#x2F;actix-web&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;api-shape&quot;&gt;API Shape&lt;&#x2F;h2&gt;
&lt;p&gt;The API shape here is rather simple.  We want to emulate what we&#x27;ve done on the command line: Submit a picture, have a picture returned.  To make things interesting, we&#x27;ll provide a way to return the bounding boxes as a JSON array too.&lt;&#x2F;p&gt;
&lt;p&gt;For submitting binary data via HTTP, there are a few options off the top of my head:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Simply submit the raw data as it stands&lt;&#x2F;li&gt;
&lt;li&gt;Use &lt;code&gt;multipart&#x2F;form-data&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Encode it as a JSON submission&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;I think the easiest would be just the raw data so let&#x27;s do that!  Multipart could possibly also work, but what about the case when you have to handle multiple images?  JSON Submission seems a bit wasteful, as you would inevitably have to convert binary data using base64 or similar.&lt;&#x2F;p&gt;
&lt;p&gt;So our API looks like this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Submit POST request as a raw file submission&lt;&#x2F;li&gt;
&lt;li&gt;Run a session against mtcnn to extract faces&lt;&#x2F;li&gt;
&lt;li&gt;Either return Bounding Boxes as JSON, or an Image Overlay as a JPEG like the command line example&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;mtcnn-as-a-struct&quot;&gt;MTCNN as a struct&lt;&#x2F;h2&gt;
&lt;p&gt;In our last blog we just simply used the &lt;code&gt;main&lt;&#x2F;code&gt; function to perform everything, but it&#x27;s not going to fly with actix until we do a bit of a refactor.  We want to encapsulate the mtcnn behaviour as a struct, something that can be passed around and moved.  The end goal is to use it in the application state.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;struct-shape&quot;&gt;Struct Shape&lt;&#x2F;h3&gt;
&lt;p&gt;Let&#x27;s make our struct include everything we need:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;The &lt;code&gt;Graph&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;The &lt;code&gt;Session&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;Some of the &lt;code&gt;Tensor&lt;&#x2F;code&gt; input params that don&#x27;t change from request to request.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll start by creating a new file &lt;code&gt;mtcnn.rs&lt;&#x2F;code&gt; and adding in the struct definition.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow::{Graph, Session, Tensor};

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Mtcnn {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;graph&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Graph,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;session&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Session,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;min_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;thresholds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, now we&#x27;re just going to plop in the initiation stuff in a &lt;code&gt;new()&lt;&#x2F;code&gt; method.  As the creation of some of these values is not infallible, we&#x27;ll return a &lt;code&gt;Result&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;new&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, Box&amp;lt;dyn Error&amp;gt;&amp;gt; {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; model = include_bytes!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn.pb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; graph = Graph::new();
    graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import_graph_def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;*model, &amp;amp;ImportGraphDefOptions::new())?;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; session = Session::new(&amp;amp;SessionOptions::new(), &amp;amp;graph)?;

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; min_size = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; thresholds = Tensor::new(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; factor = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.709&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;

    Ok(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;Self &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;{
        graph,
        session,
        min_size,
        thresholds,
        factor
    })

}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-run-function&quot;&gt;The Run Function&lt;&#x2F;h3&gt;
&lt;p&gt;&lt;em&gt;(I&#x27;m going to race along here to get to the good parts, so if you get stuck or are unsure about what&#x27;s going on, have a look at the &lt;a href=&quot;https:&#x2F;&#x2F;cetra3.github.io&#x2F;blog&#x2F;face-detection-with-tensorflow-rust&#x2F;&quot;&gt;original article&lt;&#x2F;a&gt; for an explanation of what&#x27;s happening here.)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We&#x27;ve added all the bits we need to run our session Let&#x27;s create a method that does what we&#x27;re asking the API to do: submit an image, return some bounding boxes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;DynamicImage) -&amp;gt; Result&amp;lt;Vec&amp;lt;BBoxes&amp;gt;, Status&amp;gt; {
    ...
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once again, we are returning a &lt;code&gt;Result&lt;&#x2F;code&gt; as the type, as there are some parts of the &lt;code&gt;run&lt;&#x2F;code&gt; that can fail.  We&#x27;re going to use the &lt;code&gt;Status&lt;&#x2F;code&gt; type as that is normally the error type returned&lt;&#x2F;p&gt;
&lt;p&gt;Like our previous main function, we&#x27;ll need to flatten the image input:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input = {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flattened: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = Vec::new();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_x, _y, rgb) in img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pixels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
        flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
        flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    }

    Tensor::new(&amp;amp;[img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;flattened)?
};
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we&#x27;ll feed in all the relevant inputs.  This is just the same as our previous &lt;code&gt;main&lt;&#x2F;code&gt; function, but we&#x27;re going to just borrow values from &lt;code&gt;self&lt;&#x2F;code&gt; rather than create them for each run:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = SessionRunArgs::new();

args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;min_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.min_size,
);
args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;thresholds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.thresholds,
);
args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.factor,
);
args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;input);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, let&#x27;s grab the outputs we want:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;running-the-session&quot;&gt;Running The Session&lt;&#x2F;h3&gt;
&lt;p&gt;Now we have all our args set up, we can run the session:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Uh oh.  We&#x27;re getting a compiler error here... &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;E0596&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]: cannot borrow `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.session` as mutable, as it is behind a `&amp;amp;` reference
  --&amp;gt; src&#x2F;mtcnn.rs:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;68&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10
   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;36 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;DynamicImage) -&amp;gt; Result&amp;lt;DynamicImage, Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
   |                ----- help: consider changing this to be a mutable reference: `&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;`
...
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;68 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|         &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args)?;
   |          ^^^^^^^^^^^^ `&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;` is a `&amp;amp;` &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;reference&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, so the data it refers to cannot be borrowed as mutable
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Turns out that the &lt;code&gt;Session::run()&lt;&#x2F;code&gt; function takes &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;What can we do to resolve this:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Make our &lt;code&gt;run&lt;&#x2F;code&gt; function take &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt; so we can mutate the field&lt;&#x2F;li&gt;
&lt;li&gt;Do some tricky interior mutability&lt;&#x2F;li&gt;
&lt;li&gt;Submit an &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;rust&#x2F;issues&#x2F;192&quot;&gt;issue on the tensorflow-rust crate&lt;&#x2F;a&gt; to see whether &lt;code&gt;Session&lt;&#x2F;code&gt; &lt;em&gt;really&lt;&#x2F;em&gt; needs to take &lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;We&#x27;ll go with option 3!&lt;&#x2F;p&gt;
&lt;p&gt;Update your &lt;code&gt;Cargo.toml&lt;&#x2F;code&gt; to point to the git master, rather than the cargo version:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow = { git = &amp;quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;rust&amp;quot;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;getting-the-bounding-boxes&quot;&gt;Getting the Bounding Boxes&lt;&#x2F;h3&gt;
&lt;p&gt;This has not changed at all since our &lt;code&gt;main&lt;&#x2F;code&gt; method.  We grab the bounding boxes, put them in our handy dandy &lt;code&gt;BBox&lt;&#x2F;code&gt; struct:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Our bounding box extents
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bbox)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Our facial probability
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(prob)?;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Let&amp;#39;s store the results as a Vec&amp;lt;BBox&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bboxes = Vec::new();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;While we have responses, iterate through
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i &amp;lt; bbox_res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in the 4 floats from the `bbox_res` array.
    &#x2F;&#x2F;Notice the y1, x1, etc.. is ordered differently to our struct definition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(BBox {
        y1: bbox_res[i],
        x1: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        y2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        x2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        prob: prob_res[j], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add in the facial probability
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step `i` ahead by 4.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step `i` ahead by 1.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    j += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}

debug!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BBox Length: {}, BBoxes:{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(), bboxes);

Ok(bboxes)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And that&#x27;s our &lt;code&gt;run&lt;&#x2F;code&gt; function finished.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bbox-struct-as-json&quot;&gt;BBox Struct as JSON&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;re gonna want to return a JSON representation of the BBox struct.  So let&#x27;s add in &lt;code&gt;serde_derive&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;serde_derive::Serialize;

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Copy, Clone, Debug, Serialize)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;drawing-the-output-image&quot;&gt;Drawing the Output Image&lt;&#x2F;h3&gt;
&lt;p&gt;We&#x27;ll create a function that will take a list of bounding boxes and an input image, returning the output image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;pub fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &amp;amp;Vec&amp;lt;BBox&amp;gt;) -&amp;gt; DynamicImage
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This hasn&#x27;t changed much either, but we are returning the image, rather than saving it to a file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Let&amp;#39;s clone the input image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_image = img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Iterate through all bounding boxes
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox in bboxes {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Create a `Rect` from the bounding box.
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rect = Rect::at(bbox.x1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, bbox.y1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;of_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((bbox.x2 - bbox.x1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, (bbox.y2 - bbox.y1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Draw a green line around the bounding box
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;draw_hollow_rect_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_image, rect, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LINE_COLOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}

output_image
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, we&#x27;re pretty much done with our &lt;code&gt;Mtcnn&lt;&#x2F;code&gt; struct and functions! Could we break this down even further? Yeah definitely! But for now, I think this is all we need.  We&#x27;ve encapsulated the behaviour and created a nice to use couple of functions.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;our-new-main-function&quot;&gt;Our New Main Function&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, so we&#x27;re no longer using it as a CLI, but as a self-hosted web app.  We&#x27;re going to need to change the arguments our application takes since we no longer have input and output files.&lt;&#x2F;p&gt;
&lt;p&gt;I think the only argument we should be taking initially is the listen address, and even then we should use a sensible default. So let&#x27;s use the help of &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;structopt&lt;&#x2F;a&gt; to make this pretty minimal boilerplate:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Opt {
    #[structopt(
        short = &amp;quot;l&amp;quot;,
        long = &amp;quot;listen&amp;quot;,
        help = &amp;quot;Listen Address&amp;quot;,
        default_value = &amp;quot;127.0.0.1:8000&amp;quot;
    )]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;listen&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: String,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;logging-framework&quot;&gt;Logging Framework&lt;&#x2F;h3&gt;
&lt;p&gt;Actix Web uses the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang-nursery&#x2F;log&quot;&gt;log&lt;&#x2F;a&gt; crate to display errors and debug messages.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s move on from using &lt;code&gt;println!&lt;&#x2F;code&gt; and instead use log.  I like using &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;pretty-env-logger&quot;&gt;pretty_env_logger&lt;&#x2F;a&gt; as it prints different levels as a different colour, and we can have timestamps which is useful.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;pretty_env_logger&lt;&#x2F;code&gt; still uses environment vars.  Let&#x27;s cheat and set our &lt;code&gt;RUST_LOG&lt;&#x2F;code&gt; var if none is provided then initiate our logger&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Set the `RUST_LOG` var if none is provided
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;is_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    env::set_var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn=DEBUG,actix_web=DEBUG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Create a timestamped logger
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pretty_env_logger::init_timed();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This sets up &lt;code&gt;DEBUG&lt;&#x2F;code&gt; level logs for our app and actix web, but allows us to change the log levels via environment variables still.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;actix-and-state&quot;&gt;Actix and State&lt;&#x2F;h2&gt;
&lt;p&gt;We have some state we need to pass to actix to use: our &lt;code&gt;Mtcnn&lt;&#x2F;code&gt; struct and the run method.  There are a number of ways you can give State to actix, but probably the easiest way is the &lt;code&gt;App::data&lt;&#x2F;code&gt; method.  As we are now entering a multithreaded world, we&#x27;re going to have to think about what things are &lt;code&gt;Send&lt;&#x2F;code&gt; and &lt;code&gt;Sync&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Ok, so how do we share something between threads? Well, as a first step I would look to &lt;code&gt;std::sync&lt;&#x2F;code&gt; to see what we need.  Since we know that mtcnn&#x27;s &lt;code&gt;run&lt;&#x2F;code&gt; function does not need to mutate it, only requiring a reference to immutable &lt;code&gt;self&lt;&#x2F;code&gt;, we can probably wrap it in an &lt;code&gt;Arc&lt;&#x2F;code&gt;.  If we had to mutate it, then it would probably require a Mutex as well, but we can avoid this if we use the &lt;code&gt;master&lt;&#x2F;code&gt; branch of &lt;code&gt;tensorflow-rust&lt;&#x2F;code&gt; as above.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s create our Arc:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; mtcnn = Arc::new(Mtcnn::new()?);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now, to instantiate the server:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;HttpServer::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
    App::new()
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in our mtcnn struct, we clone the reference for each worker thread
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in a logger to see the requests coming through
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(middleware::Logger::default())
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add in some routes here
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
            ...
        )
})
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;opt.listen)? &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Use the listener from the command arguments
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, let&#x27;s step through what we&#x27;re doing:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;We first build a &lt;code&gt;HttpServer&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;This takes a closure which should return an &lt;code&gt;App&lt;&#x2F;code&gt;.  This &lt;code&gt;App&lt;&#x2F;code&gt; is instantiated for each thread the http server is running&lt;&#x2F;li&gt;
&lt;li&gt;We add our &lt;code&gt;Arc&amp;lt;Mtcnn&amp;gt;&lt;&#x2F;code&gt; using the &lt;code&gt;data&lt;&#x2F;code&gt; method, and clone it for each thread listener.&lt;&#x2F;li&gt;
&lt;li&gt;We add a logger middleware.&lt;&#x2F;li&gt;
&lt;li&gt;We set up some routes with the &lt;code&gt;service&lt;&#x2F;code&gt; function&lt;&#x2F;li&gt;
&lt;li&gt;Then we bind to a listen address and run&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;handling-a-request&quot;&gt;Handling a Request&lt;&#x2F;h2&gt;
&lt;p&gt;Actix Web is an Async framework and uses tokio.  Our function is Synchronous and takes some time to complete.&lt;&#x2F;p&gt;
&lt;p&gt;In other words, our request is blocking.  Can we mix and match sync and async? Absolutely, but it is a little more cumbersome as you&#x27;ll see.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;function-signature-and-extractors&quot;&gt;Function Signature and Extractors&lt;&#x2F;h3&gt;
&lt;p&gt;Actix 1.0 makes heavy use of Extractors, which is a way of providing functions of quite different shapes.  You basically specify what you want your web function to receive, and actix will wire it up for you.  Take care though:  This does mean that some things won&#x27;t be discovered wrong until runtime.  A perfect example I had when I used the wrong type signature for the &lt;code&gt;web::Data&lt;&#x2F;code&gt; argument.&lt;&#x2F;p&gt;
&lt;p&gt;So what do we need to &lt;em&gt;extract&lt;&#x2F;em&gt; from our request? The bytes of the request body, and and also our &lt;code&gt;mtcnn&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;handle_request&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Data&amp;lt;Arc&amp;lt;Mtcnn&amp;gt;&amp;gt;,
) -&amp;gt; impl Future&amp;lt;Item = HttpResponse, Error = ActixError&amp;gt; {

    ...

}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We will use this type signature for &lt;code&gt;mtcnn&lt;&#x2F;code&gt; a fair bit, so let&#x27;s make a type alias for it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;type &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;WebMtcnn = web::Data&amp;lt;Arc&amp;lt;Mtcnn&amp;gt;&amp;gt;;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;getting-the-image-from-a-payload&quot;&gt;Getting the Image from a Payload&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, so we need a way of retrieving the image from a payload and returning a Future.  The &lt;code&gt;web::Payload&lt;&#x2F;code&gt; struct implements &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1.26&#x2F;futures&#x2F;stream&#x2F;trait.Stream.html&quot;&gt;Stream&lt;&#x2F;a&gt; with &lt;code&gt;Item&lt;&#x2F;code&gt; set to &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;bytes&#x2F;0.4.12&#x2F;bytes&#x2F;struct.Bytes.html&quot;&gt;Bytes&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Well, we don&#x27;t really care about the individual bytes we get from a stream, we want the whole lot to decode the image!  So let&#x27;s convert the &lt;code&gt;Stream&lt;&#x2F;code&gt; into a &lt;code&gt;Future&lt;&#x2F;code&gt;, and merge all the individual bytes we&#x27;ll be getting into one big bucket of bytes.  Sounds complicated, but luckily Stream has a method: &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;0.1.26&#x2F;futures&#x2F;stream&#x2F;trait.Stream.html#method.concat2&quot;&gt;concat2&lt;&#x2F;a&gt;. &lt;&#x2F;p&gt;
&lt;p&gt;This is a pretty powerful combinator which allows us to join the results of individual Stream polls into one if the item implements &lt;a href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;nightly&#x2F;core&#x2F;iter&#x2F;trait.Extend.html&quot;&gt;Extend&lt;&#x2F;a&gt; (and some other traits) which &lt;code&gt;Bytes&lt;&#x2F;code&gt; happens to.&lt;&#x2F;p&gt;
&lt;p&gt;So this looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(....)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;image-decoding-and-web-block&quot;&gt;Image Decoding and &lt;code&gt;web::block&lt;&#x2F;code&gt;&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, second thing we need to sort out, if we&#x27;re going to be decoding an image, that is probably going to block the thread until it&#x27;s done.  How long? Well if it&#x27;s a huge image, it might take milliseconds!  So we want to ensure that we&#x27;re not blocking the http workers while this is happening.  Luckily, actix web has a way of taking a blocking portion of code, and wrapping that as a future.&lt;&#x2F;p&gt;
&lt;p&gt;Enter &lt;code&gt;web::block&lt;&#x2F;code&gt;.  We&#x27;ll do our decoding in a cpu pool, bridging sync and async together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|bytes| {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
        image::load_from_memory(&amp;amp;bytes)
    })
})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, that is pretty succint: we take a stream, convert it into a future and a bundle of bytes, then use &lt;code&gt;web::block&lt;&#x2F;code&gt; to decode the bytes into an image in a background thread and return the result.  the &lt;code&gt;load_from_memory&lt;&#x2F;code&gt; function already returns a Result, which means we can just use that as the return type.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;balancing-the-error-type&quot;&gt;Balancing the Error Type&lt;&#x2F;h3&gt;
&lt;p&gt;So, our Item is converted to &lt;code&gt;Bytes&lt;&#x2F;code&gt; to &lt;code&gt;DynamicImage&lt;&#x2F;code&gt;, but we still haven&#x27;t dealt with the error types yet and it won&#x27;t compile.  What should our error type be?  Let&#x27;s use &lt;code&gt;actix_web::Error&lt;&#x2F;code&gt; as &lt;code&gt;ActixError&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;actix_web::{Error as ActixError}

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload) -&amp;gt; impl Future&amp;lt;Item = DynamicImage, Error = ActixError&amp;gt; {
    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|bytes| {
        web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
            image::load_from_memory(&amp;amp;bytes)
        })
    })
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, that is giving us few really gnarly errors when we try and compile it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error[E0271]: type mismatch resolving `&amp;lt;impl futures::future::Future as futures::future::IntoFuture&amp;gt;::Error == actix_http::error::PayloadError`
  --&amp;gt; src&#x2F;main.rs:67:22
   |
67 |     stream.concat2().and_then(move |bytes| {
   |                      ^^^^^^^^ expected enum `actix_threadpool::BlockingError`, found enum `actix_http::error::PayloadError`
   |
   = note: expected type `actix_threadpool::BlockingError&amp;lt;image::image::ImageError&amp;gt;`
              found type `actix_http::error::PayloadError`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;There&#x27;s a couple more that aren&#x27;t listed.&lt;&#x2F;p&gt;
&lt;p&gt;When you are combining streams, mapping them as futures, and otherwise trying to get some output from these combinators you are actually dealing with both the &lt;code&gt;Item&lt;&#x2F;code&gt; type, and the &lt;code&gt;Error&lt;&#x2F;code&gt; type.&lt;&#x2F;p&gt;
&lt;p&gt;The ergonomics of this are not as advanced as the &lt;code&gt;Result&lt;&#x2F;code&gt; type, where we can use the &lt;code&gt;?&lt;&#x2F;code&gt; operator to automatically adjust to the right error (if a conversion is available). When both &lt;code&gt;ops::Try&lt;&#x2F;code&gt; and &lt;code&gt;async&#x2F;await&lt;&#x2F;code&gt; syntax stabilises, this might be a different story, but for now, we need to deal with error types.&lt;&#x2F;p&gt;
&lt;p&gt;What we have instead is the magic™️ &lt;code&gt;from_err()&lt;&#x2F;code&gt; method.  This is basically the same as the &lt;code&gt;?&lt;&#x2F;code&gt; operator but for futures.  We have two futures we&#x27;re dealing with: our bundle of bytes from the stream, and the image from the blocking closure. We have 3 error types we&#x27;re dealing with: the Payload error, the Image load from memory error, and the blocking error.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s start by putting &lt;code&gt;from_err()&lt;&#x2F;code&gt; on both of the futures:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload)
  -&amp;gt; impl Future&amp;lt;Item = DynamicImage, Error = ActixError&amp;gt; {
    stream.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;concat2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|bytes| {
        web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
            image::load_from_memory(&amp;amp;bytes)
        }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    })
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;That worked! There is enough conversions for our error types to get to where we need to get it.  The &lt;code&gt;ActixError&lt;&#x2F;code&gt; type has a few blanket conversions from common error types enough to be able to make this magic happen.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;getting-the-bounding-boxes-from-the-image&quot;&gt;Getting the bounding boxes from the image&lt;&#x2F;h2&gt;
&lt;p&gt;At the core of it, we need to run the following:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But we want this to run in a threadpool too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;web::block(|| mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img))
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Let&#x27;s work through the function signature we&#x27;ll need.  At a minimum we&#x27;re gonna need the image, and the mtcnn struct.  Then we want to return a &lt;code&gt;Vec&lt;&#x2F;code&gt; of BBoxes.  We should try and keep our error types the same, so we&#x27;ll use the ActixError type.&lt;&#x2F;p&gt;
&lt;p&gt;The function signature looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn) 
  -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;BBox&amp;gt;, Error = ActixError&amp;gt; 
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We know that we&#x27;ll need a &lt;code&gt;from_err()&lt;&#x2F;code&gt; on the &lt;code&gt;web::block&lt;&#x2F;code&gt; to convert the error type, and we&#x27;ll have to use a &lt;code&gt;move&lt;&#x2F;code&gt; to give the image to the closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn) -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;BBox&amp;gt;, Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;But does this compile? Not yet:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error[E0277]: `*mut tensorflow_sys::TF_Status` cannot be sent between threads safely
  --&amp;gt; src&#x2F;main.rs:75:5
   |
75 |     web::block(move || mtcnn.run(&amp;amp;img)).from_err()
   |     ^^^^^^^^^^ `*mut tensorflow_sys::TF_Status` cannot be sent between threads safely
   |
   = help: within `tensorflow::Status`, the trait `std::marker::Send` is not implemented for `*mut tensorflow_sys::TF_Status`
   = note: required because it appears within the type `tensorflow::Status`
   = note: required by `actix_web::web::block`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;code&gt;tensorflow::Status&lt;&#x2F;code&gt;, which is the error type, can&#x27;t be sent between threads.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s just shortcut here, and convert the error to a &lt;code&gt;String&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn) -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;BBox&amp;gt;, Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This allows us to move the &lt;code&gt;Result&lt;&#x2F;code&gt; across thread boundaries, as &lt;code&gt;String&lt;&#x2F;code&gt; does implement &lt;code&gt;Send&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;returning-json-bboxes&quot;&gt;Returning JSON BBoxes&lt;&#x2F;h2&gt;
&lt;p&gt;Ok, so we have 2 functions, one to get the image from the request, and one to get the bounding boxes.  We&#x27;re gonna want to return json &lt;code&gt;HttpResponse&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;return_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn,
) -&amp;gt; impl Future&amp;lt;Item = HttpResponse, Error = ActixError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the image from the input stream
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream) 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Get the bounding boxes from the image
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|img| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, mtcnn)) 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Map the bounding boxes to a json HttpResponse
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| HttpResponse::Ok().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bboxes))
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Cool! Let&#x27;s put this in our App definition:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;HttpServer::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
    App::new()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()) 
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(middleware::Logger::default()) 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; our new API service
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(web::resource(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;v1&#x2F;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(return_bboxes))
})
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;opt.listen)?
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And let&#x27;s run it, using &lt;code&gt;curl&lt;&#x2F;code&gt; to submit a query to get some results back&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ curl --data-binary @rustfest.jpg  http:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;v1&#x2F;bboxes

[{&amp;quot;x1&amp;quot;:471.4591,&amp;quot;y1&amp;quot;:287.59888,&amp;quot;x2&amp;quot;:495.3053,&amp;quot;y2&amp;quot;:317.25327,&amp;quot;prob&amp;quot;:0.9999908}....
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Awesome! Using &lt;a href=&quot;http:&#x2F;&#x2F;jmespath.org&#x2F;&quot;&gt;jmespath&lt;&#x2F;a&gt; to see we get our 120 faces back:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ curl -s --data-binary @rustfest.jpg  http:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;v1&#x2F;bboxes | jp &amp;quot;length(@)&amp;quot;
120
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;returning-an-overlay-image&quot;&gt;Returning an Overlay Image&lt;&#x2F;h2&gt;
&lt;p&gt;The other API call we want is to return an image with the bounding boxes overlayed.  This is not much of a stretch, but the act of drawing boxes on an image is definitely a blocking action, so we&#x27;ll need to do the same thing and send it to a thread pool.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s wrap our overlay function, converting it into a Future:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;BBox&amp;gt;)
   -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;, Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_img = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img, &amp;amp;bboxes);
        
        ...

    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to want to return a &lt;code&gt;Vec&lt;&#x2F;code&gt; of &lt;code&gt;u8&lt;&#x2F;code&gt; bytes so we can use this in the return body. So we&#x27;ll need to allocate some buffer and instruct &lt;code&gt;image&lt;&#x2F;code&gt; to write out a JPEG from the image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer = vec![];

output_img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JPEG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; write out our buffer

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(buffer)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, so let&#x27;s put our little function together and see if it compiles:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;BBox&amp;gt;)
  -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;, Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_img = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img, &amp;amp;bboxes);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer = Vec::new();

        output_img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JPEG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; write out our buffer

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(buffer)
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Not quite yet: we&#x27;re missing a type annotation:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error[E0282]: type annotations needed
  --&amp;gt; src&#x2F;main.rs:82:5
   |
82 |     web::block(move || {
   |     ^^^^^^^^^^ cannot infer type for `E`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Why is there an issue with the type? Well, it relates to this line here:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(buffer) &#x2F;&#x2F; What&amp;#39;s the `Error` type here?
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;At the moment, the only error type is from the &lt;code&gt;write_to&lt;&#x2F;code&gt; method which is &lt;code&gt;ImageError&lt;&#x2F;code&gt;.  But this line here doesn&#x27;t have an error type, and could be anything.&lt;&#x2F;p&gt;
&lt;p&gt;There are 3 ways I can immediately think to handle this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Way Number 1&lt;&#x2F;strong&gt;: Declare the error type in &lt;code&gt;web::block&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;web::block::&amp;lt;_,_,ImageError&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This looks more like a turbosubmarine than a turbofish! But it compiles!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;strong&gt;Way Number 2&lt;&#x2F;strong&gt;: Declare the Result type with &lt;code&gt;as&lt;&#x2F;code&gt; &lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(buffer) as Result&amp;lt;_, ImageError&amp;gt;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;strong&gt;Way Number 3&lt;&#x2F;strong&gt;: Use &lt;code&gt;map&lt;&#x2F;code&gt; to return the buffer on success:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;output_img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JPEG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|_| buffer)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;I think for readability, #2 is probably easiest.  The &lt;code&gt;web::block&lt;&#x2F;code&gt; function takes 3 type arguments which can be confusing on first read of the code.  #3 is good too but I think it looks a bit strange.&lt;&#x2F;p&gt;
&lt;p&gt;Our final method looks like:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Vec&amp;lt;BBox&amp;gt;)
   -&amp;gt; impl Future&amp;lt;Item = Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt;, Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_img = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img, &amp;amp;bboxes);

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer = Vec::new();

        output_img.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;write_to&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; buffer, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;JPEG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)?;

        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Type annotations required for the `web::block`
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(buffer) as Result&amp;lt;_, ImageError&amp;gt; 
    }).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-api-call&quot;&gt;The API call&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, we have our little futures that we need to return bounding boxes and image overlays.  Let&#x27;s stitch this together and return a &lt;code&gt;HttpResponse&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;return_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn,
) -&amp;gt; impl Future&amp;lt;Item = HttpResponse, Error = ActixError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;... magic happens here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, first step is to get the image from the stream:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream)
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And Then once the future has resolved, we want to get the bounding boxes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|img| {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, mtcnn)
})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;moving-images-around&quot;&gt;Moving Images Around&lt;&#x2F;h3&gt;
&lt;p&gt;Now we want to get the image overlay.  We have an issue though! we give the &lt;code&gt;get_bboxes&lt;&#x2F;code&gt; future our image, and it returns a Vec of bboxes, consuming the image.  There are a couple of options here.  We could &lt;code&gt;clone()&lt;&#x2F;code&gt; the image when we give it to bboxes, but that is duplicating memory.  We could wait for &lt;code&gt;Pin&lt;&#x2F;code&gt; and &lt;code&gt;async&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;await&lt;&#x2F;code&gt; to be finished and probably deal with it in an easier way then.&lt;&#x2F;p&gt;
&lt;p&gt;Or we could adjust our &lt;code&gt;get_bboxes&lt;&#x2F;code&gt; method to return a tuple of both the image and bounding boxes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: DynamicImage,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn,
) -&amp;gt; impl Future&amp;lt;Item = (DynamicImage, Vec&amp;lt;BBox&amp;gt;), Error = ActixError&amp;gt; {
    web::block(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
        mtcnn
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;img)
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| e.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_string&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Return both the image and the bounding boxes
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| (img, bboxes))
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;from_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Making sure to update our &lt;code&gt;return_bboxes&lt;&#x2F;code&gt; function too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;return_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn,
) -&amp;gt; impl Future&amp;lt;Item = HttpResponse, Error = ActixError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|img| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, mtcnn))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;_img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| HttpResponse::Ok().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;json&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bboxes))
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;getting-the-overlay&quot;&gt;Getting the Overlay&lt;&#x2F;h3&gt;
&lt;p&gt;It would be great if rust could desugar a tuple into command arguments.  Unfortunately not for us, so we will need to create a small closure:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Create our image overlay
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, bbox))
.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Return a `HttpResponse` here
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;generating-the-response&quot;&gt;Generating the Response&lt;&#x2F;h3&gt;
&lt;p&gt;Our &lt;code&gt;HttpResponse&lt;&#x2F;code&gt; needs to wrap the buffer into a Http Request with the buffer as the body:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;HttpResponse::with_body(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;())
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Is that it? Well no, we have to set the content type header to be a jpeg:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; response = HttpResponse::with_body(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());

response
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;headers_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONTENT_TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, HeaderValue::from_static(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image&#x2F;jpeg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;));
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok now we can return the result:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;return_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: web::Payload,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: WebMtcnn,
) -&amp;gt; impl Future&amp;lt;Item = HttpResponse, Error = ActixError&amp;gt; {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_image&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(stream)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|img| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, mtcnn)
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;img&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) | &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;get_overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(img, bbox))
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;buffer&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; response = HttpResponse::with_body(StatusCode::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;OK&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, buffer.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;into&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;());
            response
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;headers_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()
                .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;insert&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;CONTENT_TYPE&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, HeaderValue::from_static(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;image&#x2F;jpeg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;));
            response
        })
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And add that to our &lt;code&gt;App&lt;&#x2F;code&gt; builder:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;HttpServer::new(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;move &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;|| {
    App::new()
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;data&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(mtcnn.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in our data handler
        &#x2F;&#x2F;Add in a logger to see the requets coming through
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;wrap&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(middleware::Logger::default()) 
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;JSON bounding boxes
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(web::resource(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;v1&#x2F;bboxes&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(return_bboxes))
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Image overlay
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;service&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(web::resource(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;&#x2F;api&#x2F;v1&#x2F;overlay&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;to_async&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(return_overlay))
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Let&#x27;s run it:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ curl --data-binary @rustfest.jpg  http:&#x2F;&#x2F;localhost:8000&#x2F;api&#x2F;v1&#x2F;bboxes &amp;gt; output.jpg
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we have our original overlay!&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot;&gt;&lt;img src=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusions&quot;&gt;Conclusions&lt;&#x2F;h2&gt;
&lt;p&gt;We stepped through converting a CLI app into a HTTP service, dipping our toes into the brave new async world.&lt;&#x2F;p&gt;
&lt;p&gt;As you can see, &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&#x2F;&quot;&gt;actix web&lt;&#x2F;a&gt; is a very versatile web framework.  My interest in it was borne out of having all the features I need to build up web apps: multipart, thread pools, great efficiency.&lt;&#x2F;p&gt;
&lt;p&gt;While it is hard to bridge the sync and async gap, it&#x27;s not impossible.  It would be great if there were some more ergonomic ways to do so, as I think a lot of developers struggle with this: I have seen a lot of questions around integrating with diesel and friends.&lt;&#x2F;p&gt;
&lt;p&gt;If you are looking for more actix web examples, the evergrowing examples repo is your best bet:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;examples&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;examples&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;I look forward to seeing what the community builds in the future!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>Face Detection with Tensorflow Rust</title>
                <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/</link>
                <guid>https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/</guid>
                <description>&lt;p&gt;One of the promises of machine learning is to be able to use it for object recognition in photos.  This includes being able to pick out features such as animals, buildings and even faces.&lt;&#x2F;p&gt;
&lt;p&gt;This article will step you through using some existing models to accomplish face detection using rust and &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;&quot;&gt;tensorflow&lt;&#x2F;a&gt;.  For the impatient among you, you can find the source code here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will be using a pre-trained model called &lt;a href=&quot;https:&#x2F;&#x2F;kpzhang93.github.io&#x2F;MTCNN_face_detection_alignment&#x2F;index.html&quot;&gt;mtcnn&lt;&#x2F;a&gt; for face detection (&lt;em&gt;Note: training a new model is not something we&#x27;ll be concerned with in this article&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;We want to read the photo, have the faces detected, and then return an image with the bounding boxes drawn in.&lt;&#x2F;p&gt;
&lt;p&gt;In other words, we want to convert this (Image used with permission of &lt;a href=&quot;https:&#x2F;&#x2F;rustfest.eu&quot;&gt;RustFest&lt;&#x2F;a&gt;, taken by &lt;a href=&quot;https:&#x2F;&#x2F;fionacastineira.com&#x2F;&quot;&gt;Fiona Castiñeira&lt;&#x2F;a&gt;):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;photos&#x2F;rustfest.jpg&quot;&gt;&lt;img src=&quot;&#x2F;photos&#x2F;rustfest.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Into this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot;&gt;&lt;img src=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tensorflow-and-mtcnn&quot;&gt;Tensorflow and MTCNN&lt;&#x2F;h2&gt;
&lt;p&gt;The original MTCNN model was written using &lt;a href=&quot;http:&#x2F;&#x2F;caffe.berkeleyvision.org&#x2F;&quot;&gt;Caffe&lt;&#x2F;a&gt;, but luckily there is a number of tensorflow python implementations for mtcnn.  I&#x27;m going to pick the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blaueck&#x2F;tf-mtcnn&quot;&gt;following&lt;&#x2F;a&gt; as it is a straight conversion into a single graph model file.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly we want to add &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;rust&quot;&gt;tensorflow rust&lt;&#x2F;a&gt; as a dependency.  Here&#x27;s a Cargo.toml to start:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2018&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;

[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tensorflow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.12.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we&#x27;re going to do is load a &lt;a href=&quot;https:&#x2F;&#x2F;tensorflow.github.io&#x2F;rust&#x2F;tensorflow&#x2F;struct.Graph.html&quot;&gt;Graph&lt;&#x2F;a&gt; which is the pre-trained MTCNN, and run a session.  The gist is that a Graph is the model used for computation, and a Session is one &lt;code&gt;run&lt;&#x2F;code&gt; of the Graph.  A lot more information about these concepts can be found &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;guide&#x2F;graphs&quot;&gt;here&lt;&#x2F;a&gt;.  I like to think of the Graph as an artificial brain in a vat, just to get some great imagery when you start plugging in inputs and outputs.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s start by grabbing the existing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blaueck&#x2F;tf-mtcnn&#x2F;raw&#x2F;master&#x2F;mtcnn.pb&quot;&gt;mtcnn.pb&lt;&#x2F;a&gt; model and trying to load it up.  Tensorflow graphs are serialised out in protobuf format and can be loaded in using &lt;code&gt;Graph::import_graph_def&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::error::Error;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow::Graph;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow::ImportGraphDefOptions;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;First, we load up the graph as a byte array
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; model = include_bytes!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn.pb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Then we create a tensorflow graph from the model
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; graph = Graph::new();
    graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import_graph_def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;*model, &amp;amp;ImportGraphDefOptions::new())?

    Ok(())
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;cargo run&lt;&#x2F;code&gt; we should see no errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cargo run
   Compiling mtcnn v0.1.0 (~&#x2F;mtcnn)
    Finished dev [unoptimized + debuginfo] target(s) in 0.89s
     Running `target&#x2F;debug&#x2F;mtcnn`
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Looks like we can load the graph!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structopt-and-the-command-line&quot;&gt;StructOpt and the Command Line&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to want to test out image generation, so let&#x27;s use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;structopt&lt;&#x2F;a&gt; to take two arguments: &lt;code&gt;input&lt;&#x2F;code&gt; and &lt;code&gt;output&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you haven&#x27;t used structopt before: structopt is like combining &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&quot;&gt;serde&lt;&#x2F;a&gt;.  The &lt;code&gt;input&lt;&#x2F;code&gt; argument will be the path of an image file.  The &lt;code&gt;output&lt;&#x2F;code&gt; will be where we save the output image.&lt;&#x2F;p&gt;
&lt;p&gt;So our struct looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;structopt::StructOpt

#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Opt {
    #[structopt(parse(from_os_str))]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: PathBuf,

    #[structopt(parse(from_os_str))]
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: PathBuf
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;parse(from_os_str)&lt;&#x2F;code&gt; attribute will convert a string argument directly into a &lt;code&gt;PathBuf&lt;&#x2F;code&gt; to save us some boiler plate&lt;&#x2F;p&gt;
&lt;p&gt;We can then use this to get a struct with our command line arguments&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; opt = Opt::from_args();
    ....
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;loading-image-data&quot;&gt;Loading Image Data&lt;&#x2F;h2&gt;
&lt;p&gt;We need to provide the tensorflow graph with our image data.  So how do we do that? We use a &lt;a href=&quot;https:&#x2F;&#x2F;tensorflow.github.io&#x2F;rust&#x2F;tensorflow&#x2F;struct.Tensor.html&quot;&gt;Tensor&lt;&#x2F;a&gt;!  Tensors represent data within our graph, it sort of reminds me of sending vertices to a GPU.  You have a big slice of data, and send it in a format that tensorflow is expecting.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;input&lt;&#x2F;code&gt; tensor in this graph is an array of floats, with dimensions: &lt;code&gt;height&lt;&#x2F;code&gt; x &lt;code&gt;width&lt;&#x2F;code&gt; x &lt;code&gt;3&lt;&#x2F;code&gt; (for 3 colour channels).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PistonDevelopers&#x2F;image&quot;&gt;image&lt;&#x2F;a&gt; crate to load the image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input_image = image::open(&amp;amp;opt.input)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we want to convert this image into its raw pixels by using the &lt;code&gt;GenericImage::pixels&lt;&#x2F;code&gt; function and send that to our graph. All multi-dimensional Tensor arrays are flat, and stored in row major order.  The model uses &lt;code&gt;BGR&lt;&#x2F;code&gt; instead of the traditional &lt;code&gt;RGB&lt;&#x2F;code&gt; for colours, so we&#x27;ll need to reverse the pixel values when we iterate through.&lt;&#x2F;p&gt;
&lt;p&gt;Putting it all together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flattened: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = Vec::new();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_x, _y, rgb) in input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pixels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
    flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simply iterates through the pixels, adding them to a flattened Vec.&lt;&#x2F;p&gt;
&lt;p&gt;We can then load this into a tensor, specifying the image height and width as arguments:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input = Tensor::new(&amp;amp;[input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;flattened)?
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! we have loaded our image into a format that the graph understands.  Let&#x27;s run a session!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-a-tensorflow-session&quot;&gt;Creating a tensorflow session&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, we have a graph, the input image, but now we need a session for the graph.  We&#x27;ll just use the defaults for this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; session = Session::new(&amp;amp;SessionOptions::new(), &amp;amp;graph)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;running-a-session&quot;&gt;Running a session&lt;&#x2F;h2&gt;
&lt;p&gt;Before we run a session, we have a few other inputs the mtcnn model is expecting.  We&#x27;re gonna use the same defaults the mtcnn library for these values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; min_size = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; thresholds = Tensor::new(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; factor = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.709&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The graph can define multiple inputs&#x2F;outputs that are required before running and it depends on the specific neural net as to what these are.  For MTCNN, these are all described in the original implementation.  Probably the most important one is the &lt;code&gt;min_size&lt;&#x2F;code&gt; which describes the minimum size to find faces.&lt;&#x2F;p&gt;
&lt;p&gt;Now we build the session arguments for the inputs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = SessionRunArgs::new();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Load our parameters for the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;min_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;min_size);
args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;thresholds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;thresholds);
args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;factor);

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Load our input image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;input);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, what about outputs? There are two that we are going to request when the session is finished: bounding boxes and probabilities:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok cool, we have our inputs, and our outputs, let&#x27;s run it!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-bbox-struct&quot;&gt;The BBox struct&lt;&#x2F;h3&gt;
&lt;p&gt;The model outputs the following values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bounding box of the faces&lt;&#x2F;li&gt;
&lt;li&gt;Landmarks of the faces&lt;&#x2F;li&gt;
&lt;li&gt;Probability that it&#x27;s a face from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In order to make it a bit more easy to work with, we&#x27;ll define a bounding box struct which encodes those values back in a more easy to read fashion:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Copy, Clone, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll omit landmarks for simplicity, but can always add them back if we need.  Our job is to convert the arrays we get back from the tensorflow session into this struct so it&#x27;s more meaningful.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;saving-the-output&quot;&gt;Saving the Output&lt;&#x2F;h3&gt;
&lt;p&gt;Right, now let&#x27;s grab back the outputs.  Just like inputs, outputs are &lt;code&gt;Tensors&lt;&#x2F;code&gt; too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bbox)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(prob)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is the shape of &lt;code&gt;bbox&lt;&#x2F;code&gt;? Well, it&#x27;s a multi-dimensional flattened array that includes 4 floats per bounding box representing the bounding box extents.  The &lt;code&gt;prob&lt;&#x2F;code&gt; is an array with a single float value per face: the probability from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;.  So we should expect the &lt;code&gt;bbox_res&lt;&#x2F;code&gt; length to be the &lt;code&gt;number of faces&lt;&#x2F;code&gt; x &lt;code&gt;4&lt;&#x2F;code&gt;, and &lt;code&gt;prob_res&lt;&#x2F;code&gt; to be equal to the number of faces.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do some basic iteration and store our results into a &lt;code&gt;Vec&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Let&amp;#39;s store the results as a Vec&amp;lt;BBox&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bboxes = Vec::new();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;While we have responses, iterate through
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i &amp;lt; bbox_res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in the 4 floats from the `bbox_res` array. 
    &#x2F;&#x2F;Notice the y1, x1, etc.. is ordered differently to our struct definition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(BBox {
        y1: bbox_res[i],
        x1: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        y2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        x2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        prob: prob_res[j], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add in the facial probability
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step `i` ahead by 4. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step `i` ahead by 1. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    j += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h5 id=&quot;combinators&quot;&gt;Combinators&lt;&#x2F;h5&gt;
&lt;p&gt;Alternatively, we could use combinators to replace the one above.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bboxes: Vec&amp;lt;_&amp;gt; = bbox_res
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;chunks_exact&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Split into chunks of 4
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(prob_res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;()) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Combine it with prob_res
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;bbox&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| BBox {
        y1: bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        x1: bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        y2: bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        x2: bbox[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
        prob,
    })
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;collect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;printing-out-the-bounding-boxes&quot;&gt;Printing out the bounding boxes&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, we haven&#x27;t encoded the bounding boxes into an image, yet. but let&#x27;s debug to make sure we&#x27;re getting back &lt;em&gt;something&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BBox Length: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, Bboxes:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(), bboxes);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this, what do we get back:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox Length: 120, BBoxes:[
    BBox {
        x1: 471.4591,
        y1: 287.59888,
        x2: 495.3053,
        y2: 317.25327,
        prob: 0.9999908
    },
    ....
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whoa! 120 faces! Awesome!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drawing-the-bounding-boxes&quot;&gt;Drawing the Bounding Boxes&lt;&#x2F;h2&gt;
&lt;p&gt;Great, we have some bounding boxes.  Let&#x27;s draw them on the image, and save the output into a file.&lt;&#x2F;p&gt;
&lt;p&gt;To draw bounding boxes, we can use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PistonDevelopers&#x2F;imageproc&quot;&gt;imageproc&lt;&#x2F;a&gt; library to draw simple borders around the bounding boxes.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we&#x27;ll make the line colour constant green outside of our &lt;code&gt;main()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LINE_COLOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Rgba&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = Rgba {
        data: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
};
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now stepping back into it.  We are feeding in the input image read only, so let&#x27;s use the first image to draw onto:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_image = input_image;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we iterate through our bounding boxes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox in bboxes {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Drawing Happens Here!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we use the &lt;code&gt;draw_hollow_rect_mut&lt;&#x2F;code&gt; function.  This will take a mutable image reference, and draw a hollow rectangle (outline) specified by the input &lt;code&gt;Rect&lt;&#x2F;code&gt;, overwriting any existing pixels.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Rect&lt;&#x2F;code&gt; takes an x and y coordinate with the &lt;code&gt;at&lt;&#x2F;code&gt; function, and then a width and height with the &lt;code&gt;of_size&lt;&#x2F;code&gt; function.  We use a bit of geometry to convert our bounding box to this format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rect = Rect::at(bbox.x1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, bbox.y1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;of_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((bbox.x2 - bbox.x1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, (bbox.y2 - bbox.y1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then draw the rect:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;draw_hollow_rect_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_image, rect, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LINE_COLOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the for loop is done, we save it in the output file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;output_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;opt.output)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re done. Let&#x27;s run it!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cargo run rustfest.jpg output.jpg
   Compiling mtcnn v0.1.0 (~&#x2F;mtcnn)
    Finished dev [unoptimized + debuginfo] target(s) in 5.12s
     Running `target&#x2F;debug&#x2F;mtcnn rustfest.jpg output.jpg`
2019-03-28 16:15:48.194933: I tensorflow&#x2F;core&#x2F;platform&#x2F;cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA
BBox Length: 154, BBoxes:[
    BBox {
        x1: 951.46875,
        y1: 274.00577,
        x2: 973.68304,
        y2: 301.93915,
        prob: 0.9999999
    },
....
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks good, no errors!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s step through what we&#x27;ve done in this little application:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Loaded a pre-trained tensorflow graph&lt;&#x2F;li&gt;
&lt;li&gt;Parse the command line arguments&lt;&#x2F;li&gt;
&lt;li&gt;Read in image data&lt;&#x2F;li&gt;
&lt;li&gt;Extracted faces by running a tensorflow session&lt;&#x2F;li&gt;
&lt;li&gt;Saved the results of that session back to the image&lt;&#x2F;li&gt;
&lt;li&gt;Wrote out the file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you got stuck at any point, have a look at the repository here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this gives you a good introduction to using tensorflow in rust&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>TMQ 0.1.0 Release: ZeroMQ bindings for Tokio</title>
                <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/tmq-0-1-0/</link>
                <guid>https://cetra3.github.io/blog/tmq-0-1-0/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;TMQ&lt;&#x2F;a&gt; is a rust library to use &lt;a href=&quot;http:&#x2F;&#x2F;zeromq.org&#x2F;&quot;&gt;ZeroMQ&lt;&#x2F;a&gt; within the &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;Tokio&lt;&#x2F;a&gt; ecosystem.  ZeroMQ is a distributed messaging queue written in C supporting a number of different messaging patterns.  While there are other options out there (including gRPC, etc..), I settled on ZeroMQ due to its cross-language support, great documentation and battle-tested nature.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&#x2F;0.1.0&quot;&gt;Version &lt;code&gt;0.1.0&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is an alpha release which implements &lt;code&gt;request&lt;&#x2F;code&gt;, &lt;code&gt;response&lt;&#x2F;code&gt;, &lt;code&gt;publish&lt;&#x2F;code&gt; and &lt;code&gt;subscribe&lt;&#x2F;code&gt; style sockets.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;Usage Example&lt;&#x2F;h2&gt;
&lt;p&gt;This example uses &lt;code&gt;tmq&lt;&#x2F;code&gt; to subscribe to messages, and then prints them out via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;pretty-env-logger&quot;&gt;pretty-env-logger&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failure;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; futures;
#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; log;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pretty_env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tmq;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tokio;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;futures::{Future, Stream};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tmq::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::env;

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(_) = env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;) {
        env::set_var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subscribe=DEBUG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
    }

    pretty_env_logger::init();

    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; request = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;127.0.0.1:7899&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Couldn&amp;#39;t connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;)
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
            info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Subscribe: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, val.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;));
            Ok(())
        })
        .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
            error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error Subscribing: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e);
        });

    tokio::run(request);
}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other examples of usage can be found in the project itself: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;tree&#x2F;master&#x2F;examples&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;existing-rust-crates&quot;&gt;Existing Rust Crates&lt;&#x2F;h2&gt;
&lt;p&gt;To find out where &lt;code&gt;tmq&lt;&#x2F;code&gt; sits within the rust ecosystem, it makes sense to discuss this in terms of other ZeroMQ crates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-rust-zeromq-bindings&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;zmq&quot;&gt;zmq&lt;&#x2F;a&gt; - Rust ZeroMQ Bindings&lt;&#x2F;h3&gt;
&lt;p&gt;This library has bindings to the C API and provides a great way to use ZeroMQ within rust.  You still need a copy of ZeroMQ on your system and need it compiled in, but that difficulty is pretty much on par with using OpenSSL.  I have managed to use this library in OSX, CentOS and Ubuntu with not many issues.&lt;&#x2F;p&gt;
&lt;p&gt;The only downside of this library is the lack of bindings to tokio, and is one of the primary motivators for creating &lt;code&gt;tmq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-rs-a-native-implementation-of-zeromq-in-rust&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeromq&#x2F;zmq.rs&quot;&gt;zmq.rs&lt;&#x2F;a&gt; - A Native Implementation of ZeroMQ in Rust&lt;&#x2F;h3&gt;
&lt;p&gt;This library was a Rewrite in Rust attempt at a full ZeroMQ reimplementation, which hasn&#x27;t seen any changes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeromq&#x2F;zmq.rs&#x2F;commits&#x2F;master&quot;&gt;since 2015&lt;&#x2F;a&gt; and can probably be considered abandoned.  Regardless: this API is still the old blocking style, which would still predicate a need for &lt;code&gt;tmq&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-tokio-run-omq-sockets-using-tokio-reactors-futures-etc&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rotty&#x2F;zmq-tokio&quot;&gt;zmq-tokio&lt;&#x2F;a&gt; - Run ØMQ sockets using tokio reactors, futures, etc.&lt;&#x2F;h3&gt;
&lt;p&gt;Not even published on crates.io but a great initial attempt at bridging the async gap.  This crate used the historic &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio-core&quot;&gt;tokio-core&lt;&#x2F;a&gt; library which is a bit of a pain to adapt to the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; crate.  Unfortunately it looks like it&#x27;s since &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rotty&#x2F;zmq-tokio&#x2F;pull&#x2F;7&quot;&gt;been abandoned&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokio-zmq-zeromq-concepts-with-futures-on-tokio-s-runtime&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-zmq&quot;&gt;tokio-zmq&lt;&#x2F;a&gt; - ZeroMQ Concepts with futures on Tokio&#x27;s runtime&lt;&#x2F;h3&gt;
&lt;p&gt;This library is probably the most polished version for &lt;code&gt;tokio&lt;&#x2F;code&gt; and one that would be compared mostly to &lt;code&gt;tmq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would have chosen this library, but the one major roadblock is the &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;licenses&#x2F;gpl-3.0.en.html&quot;&gt;GPL&lt;&#x2F;a&gt; license.  The GPL within a rust project is viral.  You can&#x27;t use this library without making the rest of your project GPL or GPL Compatible. If this doesn&#x27;t concern you, then I would consider using this library.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comparison-between-tmq&quot;&gt;Comparison between tmq&lt;&#x2F;h3&gt;
&lt;p&gt;In comparison to &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt;, &lt;code&gt;tmq&lt;&#x2F;code&gt; has less boilerplate to acheive the same thing, but does use a couple of custom traits to speed things along.  This makes &lt;code&gt;tmq&lt;&#x2F;code&gt; a bit more opinionated, but less verbose.&lt;&#x2F;p&gt;
&lt;p&gt;Both styles have their merits, &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt; does give you more control over things wheras &lt;code&gt;tmq&lt;&#x2F;code&gt; is, in my opinion, easier to write and reason about, but more restrictive in how you use it.&lt;&#x2F;p&gt;
&lt;p&gt;To do a direct comparison of both libraries we&#x27;re using the &lt;code&gt;response&lt;&#x2F;code&gt; example.  This example is a simple echo response, which when it receives a message, it echos it back verbatim to the requester.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tokio-zmq&quot;&gt;tokio-zmq&lt;&#x2F;h4&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https:&#x2F;&#x2F;git.asonix.dog&#x2F;asonix&#x2F;async-zmq&#x2F;src&#x2F;branch&#x2F;development&#x2F;tokio-zmq&#x2F;examples&quot;&gt;excerpt&lt;&#x2F;a&gt; from &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ctx = Arc::new(zmq::Context::new());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; req_fut = Req::builder(ctx).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;localhost:5560&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; runner = req_fut.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
    req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sink, stream) = req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sink_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();

        stream
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| {
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; msg in multipart {
                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(msg) = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
                        println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, msg);
                    }
                }
                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(i)
            })
            .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sink)
    })
});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On of the things you will notice is there is a lot of standard &lt;code&gt;futures&lt;&#x2F;code&gt; and &lt;code&gt;tokio&lt;&#x2F;code&gt; types used here: &lt;code&gt;sink&lt;&#x2F;code&gt;, &lt;code&gt;stream&lt;&#x2F;code&gt;, etc..  While this does make it more verbose, you are using constructs that you are familiar with in the futures style.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tmq&quot;&gt;tmq&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;blob&#x2F;master&#x2F;examples&#x2F;response.rs&quot;&gt;similar example&lt;&#x2F;a&gt; (although not using &lt;code&gt;multipart&lt;&#x2F;code&gt; messages) from &lt;code&gt;tmq&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; responder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;respond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;127.0.0.1:7899&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?
    .&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Message| {
        info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Request: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;));
        Ok(msg)
    });
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll notice that the library has a bit less boilerplate, but is more opinionated on how you structure a response.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of a &lt;code&gt;sink&#x2F;stream&lt;&#x2F;code&gt; approach, the responder is a stream but has a &lt;code&gt;with&lt;&#x2F;code&gt; method.  The &lt;code&gt;with&lt;&#x2F;code&gt; method takes anything that implements the &lt;code&gt;Responder&lt;&#x2F;code&gt; trait, of which there is a blanket implemenation for closures and functions that take a message and return a message.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-changes&quot;&gt;Future Changes&lt;&#x2F;h2&gt;
&lt;p&gt;While currently usable, the &lt;code&gt;tmq&lt;&#x2F;code&gt; library is far from finished and requires some work to bring it out of an alpha state.  In no particular order here are the plans for the library:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h4&gt;
&lt;p&gt;Unit tests and integration tests need to be added in order to confirm and wire up connections.  As the library is rather lightweight now the need for integration tests hasn&#x27;t really arisen, but this will become more complicated in the future as more socket types are added.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;benchmarking&quot;&gt;Benchmarking&lt;&#x2F;h4&gt;
&lt;p&gt;Benchmarks need to be added to the library in order to show the performance of using this over standard &lt;code&gt;zmq&lt;&#x2F;code&gt;.  Running up some dummy benchmarks show that it is perfomant enough for my current use case, and provides less overhead than your standard REST API calls.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;windows-support&quot;&gt;Windows Support&lt;&#x2F;h4&gt;
&lt;p&gt;I &lt;em&gt;cheated&lt;&#x2F;em&gt; a little by using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mio&#x2F;0.6.16&#x2F;mio&#x2F;event&#x2F;trait.Evented.html&quot;&gt;Evented&lt;&#x2F;a&gt; trait for mio, which makes it dead easy to use in tokio via &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.15&#x2F;tokio&#x2F;reactor&#x2F;struct.PollEvented2.html&quot;&gt;PollEvented2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately the async story on windows is a bit different, and I haven&#x27;t had a need to deploy on windows just yet.  But it is something that has been considered.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h4&gt;
&lt;p&gt;The library is mostly undocumented besides from the examples.  Documentation should be pretty easy to do at this stage and won&#x27;t take too long.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;more-socket-types&quot;&gt;More Socket Types&lt;&#x2F;h4&gt;
&lt;p&gt;Implementing more socket types, to make this feature complete with the standard &lt;code&gt;zmq&lt;&#x2F;code&gt; library.  There a plethora of different socket types for different use cases that give different guarantees.  The 4 standard ones implemented are enough for me to start using this library today, but could easily be expanded.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;multipart-messages&quot;&gt;Multipart messages&lt;&#x2F;h4&gt;
&lt;p&gt;Multipart support for messages.  Currently this is not supported, but should be mostly easy to implement&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-thoughts&quot;&gt;Further thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m currently using &lt;code&gt;tmq&lt;&#x2F;code&gt; within an &lt;code&gt;actix-web&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolbench.com.au&#x2F;&quot;&gt;application&lt;&#x2F;a&gt; to bridge some messages and audit logs between a polyglot backend (including Java &amp;amp; Python).  It has been quite solid so far, and I have plans to remove an existing ActiveMQ service to be replaced with &lt;code&gt;tmq&lt;&#x2F;code&gt; where appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;Version &lt;code&gt;0.1.0&lt;&#x2F;code&gt; is the first real release, with previous releases having to vendor in the &lt;code&gt;zmq&lt;&#x2F;code&gt; library in order to publish.   While it is alpha, I don&#x27;t plan to change what is there currently unless there is a compelling reason to do so.&lt;&#x2F;p&gt;
&lt;p&gt;Please give &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt; a try and let me know your thoughts!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>My Wishes for Rust 2019</title>
                <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/rust-2019/</link>
                <guid>https://cetra3.github.io/blog/rust-2019/</guid>
                <description>&lt;p&gt;2018 was a massive year for rust, and it&#x27;s great to reflect back on how far we&#x27;ve all come.  My main wish for the new year is to put on the breaks a little bit, and finish off what has been started without taking on anything majorly new.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of areas that I feel need more attention than most (purely for selfish reasons of course!):&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiler-times-ide-support-and-rls&quot;&gt;Compiler Times, IDE Support and RLS&lt;&#x2F;h2&gt;
&lt;p&gt;I think RLS is great.  I think &lt;code&gt;cargo check&lt;&#x2F;code&gt; is great too.  Sometimes when I am waiting for RLS to finish in VSCode, I run &lt;code&gt;cargo check&lt;&#x2F;code&gt; in a terminal to see who wins the race.  Sometimes I get results faster from the &lt;code&gt;cargo check&lt;&#x2F;code&gt; than I do in RLS.  I&#x27;m not sure why that is, it might be that I&#x27;m making a lot of small edits, and RLS is constantly restarting. I am assuming that the plumbing for both methods is rather similar.  On average, if I just adjust whitespace on one of my projects, it takes at least 10 seconds to recompile.  If I change any trivial bit of code, this doubles to 20 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;I would love to have dynamic loading in rust as a first class citizen, but I fear the ABI stabilisation is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;600&quot;&gt;far way off&lt;&#x2F;a&gt; (I know you can &lt;a href=&quot;https:&#x2F;&#x2F;michael-f-bryan.github.io&#x2F;rust-ffi-guide&#x2F;dynamic_loading.html&quot;&gt;cheat&lt;&#x2F;a&gt; by using the C ABI and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nagisa&#x2F;rust_libloading&quot;&gt;libloading&lt;&#x2F;a&gt; but there is a fair amount of &lt;code&gt;unsafe&lt;&#x2F;code&gt; code, which I&#x27;m not comfortable with).  This would alleviate some of the issues around compilation times, by allowing compilation to be broken up into smaller chunks.&lt;&#x2F;p&gt;
&lt;p&gt;For instance: I implemented a WebDAV handler with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&quot;&gt;actix-web&lt;&#x2F;a&gt;.  This added a significant portion of time to compilation after the implementation was finished, and the code is mostly decoupled from the rest of the app and sits in its own little route (XML instead of JSON, etc..).  I&#x27;d love to be able to just hot-load this as a module, rather than compile it in each time if I&#x27;m not even touching this part.  Incremental compilation does help a little bit here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;better-ide-support&quot;&gt;Better IDE Support&lt;&#x2F;h3&gt;
&lt;p&gt;I have been using &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;VSCode&lt;&#x2F;a&gt; as my primary rust IDE for a while now, which is great, but I&#x27;d love to be able to use IntelliJ as well.  Each time there is an update, I do give it another shot, and find that there are a couple of problems with it:&lt;&#x2F;p&gt;
&lt;div style=&#x27;position:relative; padding-bottom:53.68%&#x27;&gt;&lt;iframe src=&#x27;https:&#x2F;&#x2F;gfycat.com&#x2F;ifr&#x2F;SmallCarefulDiamondbackrattlesnake&#x27; frameborder=&#x27;0&#x27; scrolling=&#x27;no&#x27; width=&#x27;100%&#x27; height=&#x27;100%&#x27; style=&#x27;position:absolute;top:0;left:0;&#x27; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Weeeeeeeeeeeeeeeeeeeeeee&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Admittedly, each release of the IntelliJ rust plugin is better than the last, but it is not even close to the support that Java has.  I am hoping that this changes in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d also love to be able to give &lt;a href=&quot;https:&#x2F;&#x2F;www.onivim.io&#x2F;&quot;&gt;Oni&lt;&#x2F;a&gt; a go, but currently it&#x27;s in limbo until I, or someone else, has enough time to work out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onivim&#x2F;oni&#x2F;issues&#x2F;1926&quot;&gt;what is wrong&lt;&#x2F;a&gt; with the Language Server Integration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-await&quot;&gt;Async&#x2F;Await&lt;&#x2F;h2&gt;
&lt;p&gt;I would really love to see the async&#x2F;await story come to a close in 2019.  The rust team has laid the groundwork with the 2018 edition, and together with the new &lt;a href=&quot;https:&#x2F;&#x2F;boats.gitlab.io&#x2F;blog&#x2F;post&#x2F;2018-04-06-async-await-final&#x2F;&quot;&gt;pinning API&lt;&#x2F;a&gt; I feel like it&#x27;s &lt;em&gt;just&lt;&#x2F;em&gt; around the corner.  This has the opportunity to really change the landscape and make rust a much more productive language.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve had a crack at writing both a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;&quot;&gt;multipart client&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;ZeroMQ library&lt;&#x2F;a&gt;, but I can see that when the async stuff reaches stable, it&#x27;s going to make life a lot easier.   Kudos to the team for moving this forward (I also happen to think the &lt;a href=&quot;http:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;futures-rs&#x2F;assets&#x2F;images&#x2F;futures-rs-logo.svg&quot;&gt;logo&lt;&#x2F;a&gt; for &lt;code&gt;futures-rs&lt;&#x2F;code&gt; is pretty rad!)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation-churn&quot;&gt;Documentation Churn&lt;&#x2F;h3&gt;
&lt;p&gt;With these changes to async, there is going to be some challenges around documentation.  I feel in tokio-land there is a high degree of tribal knowledge that, if you don&#x27;t keep up with things, you are left behind.&lt;&#x2F;p&gt;
&lt;p&gt;There is the new &lt;code&gt;futures 0.3&lt;&#x2F;code&gt; crate, which is not currently in use by tokio crate, you have to use futures &lt;code&gt;0.1&lt;&#x2F;code&gt;.  No-one knows what happened to &lt;code&gt;0.2&lt;&#x2F;code&gt;, it&#x27;s a mystery left for future rust historians, and &lt;code&gt;0.3&lt;&#x2F;code&gt; is still very much in &lt;a href=&quot;http:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;futures-rs&#x2F;blog&#x2F;2018&#x2F;09&#x2F;02&#x2F;futures-0.3.0-alpha.4.html&quot;&gt;alpha&lt;&#x2F;a&gt;. Earlier on in the year if you went straight to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;&quot;&gt;docs.rs page&lt;&#x2F;a&gt; for futures, this would direct you to the &lt;code&gt;0.3&lt;&#x2F;code&gt; version, which isn&#x27;t helpful if you are using this in conjunction with tokio (this appears to be resolved now, by some clever use of yanking).&lt;&#x2F;p&gt;
&lt;p&gt;Another example is the move away from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio-core&quot;&gt;tokio-core&lt;&#x2F;a&gt; into the standard &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; crate.  This is something that is a great evolution for tokio, but has left a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-core&#x2F;reverse_dependencies&quot;&gt;number of libraries&lt;&#x2F;a&gt; outdated.  A lot of the great blogs by pioneering devs have also become outdated when dealing with this, which increases the frustration for any newcomers.  I am hoping that now things are more &lt;em&gt;settled&lt;&#x2F;em&gt; that this won&#x27;t be much of an issue.&lt;&#x2F;p&gt;
&lt;p&gt;All of these changes adds to a high level of fatigue for developers.  If you&#x27;re not lucky enough to be working in this space day-to-day, coming back after 6 months would be daunting.  There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;doc-push&quot;&gt;push to help modernise the documentation&lt;&#x2F;a&gt;, but this hasn&#x27;t seen much activity in a couple of months.  I&#x27;m hoping to find some time in the new year to help out with this, as I think there is a lot of work to be done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think rust has come a long way and still has a long way to go.  I focused a lot of energy on &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolbench.com.au&#x2F;&quot;&gt;writing apps&lt;&#x2F;a&gt; in rust this year, and will undoubtably accelerate the usage as time goes on.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that the rust team has time to put on the breaks, and apply a bit of polish before doing anything major.  I also hope I have more time to contribute some bits and pieces here and there to make the community better.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
