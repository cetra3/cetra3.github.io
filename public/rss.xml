<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
        <title>Cetra&#x27;s Thoughts</title>
        <link>https://cetra3.github.io</link>
        <description>Notes and Discussion pieces</description>
        <generator>Zola</generator>
        <language>en</language>
        <atom:link href="https://cetra3.github.io/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Thu, 28 Mar 2019 00:00:00 +0000</lastBuildDate>
        
            <item>
                <title>Face Detection with Tensorflow Rust</title>
                <pubDate>Thu, 28 Mar 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/</link>
                <guid>https://cetra3.github.io/blog/face-detection-with-tensorflow-rust/</guid>
                <description>&lt;p&gt;One of the promises of machine learning is to be able to use it for object recognition in photos.  This includes being able to pick out features such as animals, buildings and even faces.&lt;&#x2F;p&gt;
&lt;p&gt;This article will step you through using some existing models to accomplish face detection using rust and &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;&quot;&gt;tensorflow&lt;&#x2F;a&gt;.  For the impatient among you, you can find the source code here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;We will be using a pre-trained model called &lt;a href=&quot;https:&#x2F;&#x2F;kpzhang93.github.io&#x2F;MTCNN_face_detection_alignment&#x2F;index.html&quot;&gt;mtcnn&lt;&#x2F;a&gt; for face detection (&lt;em&gt;Note: training a new model is not something we&#x27;ll be concerned with in this article&lt;&#x2F;em&gt;).&lt;&#x2F;p&gt;
&lt;h2 id=&quot;the-challenge&quot;&gt;The Challenge&lt;&#x2F;h2&gt;
&lt;p&gt;We want to read the photo, have the faces detected, and then return an image with the bounding boxes drawn in.&lt;&#x2F;p&gt;
&lt;p&gt;In other words, we want to convert this (Image courtesy of the &lt;a href=&quot;https:&#x2F;&#x2F;www.rust-lang.org&#x2F;community&quot;&gt;rust community&lt;&#x2F;a&gt; page):&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;photos&#x2F;rustfest.jpg&quot;&gt;&lt;img src=&quot;&#x2F;photos&#x2F;rustfest.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Into this:&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot;&gt;&lt;img src=&quot;&#x2F;photos&#x2F;rustfest_faces.jpg&quot; alt=&quot;&quot; &#x2F;&gt;&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;tensorflow-and-mtcnn&quot;&gt;Tensorflow and MTCNN&lt;&#x2F;h2&gt;
&lt;p&gt;The original MTCNN model was written using &lt;a href=&quot;http:&#x2F;&#x2F;caffe.berkeleyvision.org&#x2F;&quot;&gt;Caffe&lt;&#x2F;a&gt;, but luckily there is a number of tensorflow python implementations for mtcnn.  I&#x27;m going to pick the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blaueck&#x2F;tf-mtcnn&quot;&gt;following&lt;&#x2F;a&gt; as it is a straight conversion into a single graph model file.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly we want to add &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tensorflow&#x2F;rust&quot;&gt;tensorflow rust&lt;&#x2F;a&gt; as a dependency.  Here&#x27;s a Cargo.toml to start:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[package]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;name &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;version &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.1.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;edition &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;2018&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;[dependencies]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;tensorflow &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;= &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;0.12.0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What we&#x27;re going to do is load a &lt;a href=&quot;https:&#x2F;&#x2F;tensorflow.github.io&#x2F;rust&#x2F;tensorflow&#x2F;struct.Graph.html&quot;&gt;Graph&lt;&#x2F;a&gt; which is the pre-trained MTCNN, and run a session.  The gist is that a Graph is the model used for computation, and a Session is one &lt;code&gt;run&lt;&#x2F;code&gt; of the Graph.  A lot more information about these concepts can be found &lt;a href=&quot;https:&#x2F;&#x2F;www.tensorflow.org&#x2F;guide&#x2F;graphs&quot;&gt;here&lt;&#x2F;a&gt;.  I like to think of the Graph as an artificial brain in a vat, just to get some great imagery when you start plugging in inputs and outputs.&lt;&#x2F;p&gt;
&lt;p&gt;So let&#x27;s start by grabbing the existing &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;blaueck&#x2F;tf-mtcnn&#x2F;raw&#x2F;master&#x2F;mtcnn.pb&quot;&gt;mtcnn.pb&lt;&#x2F;a&gt; model and trying to load it up.  Tensorflow graphs are serialised out in protobuf format and can be loaded in using &lt;code&gt;Graph::import_graph_def&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::error::Error;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow::Graph;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tensorflow::ImportGraphDefOptions;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;First, we load up the graph as a byte array
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; model = include_bytes!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;mtcnn.pb&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Then we create a tensorflow graph from the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; graph = Graph::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;import_graph_def&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;*model, &amp;amp;ImportGraphDefOptions::new())?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running &lt;code&gt;cargo run&lt;&#x2F;code&gt; we should see no errors:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cargo run
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Compiling mtcnn v0.1.0 (~&#x2F;mtcnn)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Finished dev [unoptimized + debuginfo] target(s) in 0.89s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Running &#96;target&#x2F;debug&#x2F;mtcnn&#96;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! Looks like we can load the graph.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;structopt-and-the-command-line&quot;&gt;StructOpt and the Command Line&lt;&#x2F;h2&gt;
&lt;p&gt;We&#x27;re going to want to test out image generation, so let&#x27;s use &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;TeXitoi&#x2F;structopt&quot;&gt;structopt&lt;&#x2F;a&gt; to take two arguments: &lt;code&gt;input&lt;&#x2F;code&gt; and &lt;code&gt;output&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;If you haven&#x27;t used structopt before: structopt is like combining &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;clap-rs&#x2F;clap&quot;&gt;clap&lt;&#x2F;a&gt; with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;serde-rs&#x2F;serde&quot;&gt;serde&lt;&#x2F;a&gt;.  The &lt;code&gt;input&lt;&#x2F;code&gt; argument will be the path of an image file.  The &lt;code&gt;output&lt;&#x2F;code&gt; will be where we save the output image.&lt;&#x2F;p&gt;
&lt;p&gt;So our struct looks like this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::path::PathBuf;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;structopt::StructOpt
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(StructOpt)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Opt {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[structopt(parse(from_os_str))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: PathBuf,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[structopt(parse(from_os_str))]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;output&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: PathBuf
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The &lt;code&gt;parse(from_os_str)&lt;&#x2F;code&gt; attribute will convert a string argument directly into a &lt;code&gt;PathBuf&lt;&#x2F;code&gt; to save us some boiler plate&lt;&#x2F;p&gt;
&lt;p&gt;We can then use this to get a struct with our command line arguments&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() -&amp;gt; Result&amp;lt;(), Box&amp;lt;dyn Error&amp;gt;&amp;gt; {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; opt = Opt::from_args();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;....
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;loading-image-data&quot;&gt;Loading Image Data&lt;&#x2F;h2&gt;
&lt;p&gt;We need to provide the tensorflow graph with our image data.  So how do we do that? We use a &lt;a href=&quot;https:&#x2F;&#x2F;tensorflow.github.io&#x2F;rust&#x2F;tensorflow&#x2F;struct.Tensor.html&quot;&gt;Tensor&lt;&#x2F;a&gt;!  Tensors represent data within our graph, it sort of reminds me of sending vertices to a GPU.  You have a big slice of data, and send it in a format that tensorflow is expecting.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;input&lt;&#x2F;code&gt; tensor in this graph is an array of floats, with dimensions: &lt;code&gt;height&lt;&#x2F;code&gt; x &lt;code&gt;width&lt;&#x2F;code&gt; x &lt;code&gt;3&lt;&#x2F;code&gt; (for 3 colour channels).&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PistonDevelopers&#x2F;image&quot;&gt;image&lt;&#x2F;a&gt; crate to load the image:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input_image = image::open(&amp;amp;opt.input)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next we want to convert this image into its raw pixels by using the &lt;code&gt;GenericImage::pixels&lt;&#x2F;code&gt; function and send that to our graph. All multi-dimensional Tensor arrays are flat, and stored in row major order.  The model uses &lt;code&gt;BGR&lt;&#x2F;code&gt; instead of the traditional &lt;code&gt;RGB&lt;&#x2F;code&gt; for colours, so we&#x27;ll need to reverse the pixel values when we iterate through.&lt;&#x2F;p&gt;
&lt;p&gt;Putting it all together:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; flattened: Vec&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(_x, _y, rgb) in input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;pixels&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;flattened.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(rgb[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;] as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;This simply iterates through the pixels, adding them to a flattened Vec.&lt;&#x2F;p&gt;
&lt;p&gt;We can then load this into a tensor, specifying the image height and width as arguments:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; input = Tensor::new(&amp;amp;[input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;height&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;width&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u64&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;flattened)?
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Great! we have loaded our image into a format that the graph understands.  Let&#x27;s run a session!&lt;&#x2F;p&gt;
&lt;h3 id=&quot;creating-a-tensorflow-session&quot;&gt;Creating a tensorflow session&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, we have a graph, the input image, but now we need a session for the graph.  We&#x27;ll just use the defaults for this:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; session = Session::new(&amp;amp;SessionOptions::new(), &amp;amp;graph)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h2 id=&quot;running-a-session&quot;&gt;Running a session&lt;&#x2F;h2&gt;
&lt;p&gt;Before we run a session, we have a few other inputs the mtcnn model is expecting.  We&#x27;re gonna use the same defaults the mtcnn library for these values:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; min_size = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;40&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; thresholds = Tensor::new(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.6&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.7&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; factor = Tensor::new(&amp;amp;[]).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with_values&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0.709&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;])?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;The graph can define multiple inputs&#x2F;outputs that are required before running and it depends on the specific neural net as to what these are.  For MTCNN, these are all described in the original implementation.  Probably the most important one is the &lt;code&gt;min_size&lt;&#x2F;code&gt; which describes the minimum size to find faces.&lt;&#x2F;p&gt;
&lt;p&gt;Now we build the session arguments for the inputs:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args = SessionRunArgs::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Load our parameters for the model
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;min_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;min_size);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;thresholds&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;thresholds);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;factor&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;factor);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Load our input image
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;add_feed&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;input&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &amp;amp;input);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok, what about outputs? There are two that we are going to request when the session is finished: bounding boxes and probabilities:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;box&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;request_fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;graph.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;operation_by_name_required&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Ok cool, we have our inputs, and our outputs, let&#x27;s run it!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;session.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; args)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;&lt;h3 id=&quot;the-bbox-struct&quot;&gt;The BBox struct&lt;&#x2F;h3&gt;
&lt;p&gt;The model outputs the following values:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Bounding box of the faces&lt;&#x2F;li&gt;
&lt;li&gt;Landmarks of the faces&lt;&#x2F;li&gt;
&lt;li&gt;Probability that it&#x27;s a face from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;In order to make it a bit more easy to work with, we&#x27;ll define a bounding box struct which encodes those values back in a more easy to read fashion:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;derive&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(Copy, Clone, Debug)]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;x2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;y2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;pub &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;prob&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;ll omit landmarks for simplicity, but can always add them back if we need.  Our job is to convert the arrays we get back from the tensorflow session into this struct so it&#x27;s more meaningful.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;saving-the-output&quot;&gt;Saving the Output&lt;&#x2F;h3&gt;
&lt;p&gt;Right, now let&#x27;s grab back the outputs.  Just like inputs, outputs are &lt;code&gt;Tensors&lt;&#x2F;code&gt; too:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(bbox)?;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; prob_res: Tensor&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;f32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = args.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;fetch&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(prob)?;
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;What is the shape of &lt;code&gt;bbox&lt;&#x2F;code&gt;? Well, it&#x27;s a multi-dimensional flattened array that includes 4 floats per bounding box representing the bounding box extents.  The &lt;code&gt;prob&lt;&#x2F;code&gt; is an array with a single float value per face: the probability from &lt;code&gt;0&lt;&#x2F;code&gt; to &lt;code&gt;1&lt;&#x2F;code&gt;.  So we should expect the &lt;code&gt;bbox_res&lt;&#x2F;code&gt; length to be the &lt;code&gt;number of faces&lt;&#x2F;code&gt; x &lt;code&gt;4&lt;&#x2F;code&gt;, and &lt;code&gt;prob_res&lt;&#x2F;code&gt; to be equal to the number of faces.&lt;&#x2F;p&gt;
&lt;p&gt;Let&#x27;s do some basic iteration and store our results into a &lt;code&gt;Vec&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Let&amp;#39;s store the results as a Vec&amp;lt;BBox&amp;gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bboxes = Vec::new();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; j = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;While we have responses, iterate through
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;while&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; i &amp;lt; bbox_res.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Add in the 4 floats from the &#96;bbox_res&#96; array. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Notice the y1, x1, etc.. is ordered differently to our struct definition.
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;push&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(BBox {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y1: bbox_res[i],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x1: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;2&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x2: bbox_res[i + &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;3&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;prob: prob_res[j], &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F; Add in the facial probability
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step &#96;i&#96; ahead by 4. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;i += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;4&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Step &#96;i&#96; ahead by 1. 
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;j += &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;(Note: I&#x27;m sure someone more astute could do this much cleaner with combinators!)&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;printing-out-the-bounding-boxes&quot;&gt;Printing out the bounding boxes&lt;&#x2F;h3&gt;
&lt;p&gt;Ok, we haven&#x27;t encoded the bounding boxes into an image, yet. but let&#x27;s debug to make sure we&#x27;re getting back &lt;em&gt;something&lt;&#x2F;em&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;BBox Length: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;, Bboxes:&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{:#?}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, bboxes.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;len&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(), bboxes);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Running this, what do we get back:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox Length: 120, BBoxes:[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x1: 471.4591,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y1: 287.59888,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x2: 495.3053,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y2: 317.25327,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;prob: 0.9999908
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;....
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Whoa! 120 faces! Awesome!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;drawing-the-bounding-boxes&quot;&gt;Drawing the Bounding Boxes&lt;&#x2F;h2&gt;
&lt;p&gt;Great, we have some bounding boxes.  Let&#x27;s draw them on the image, and save the output into a file.&lt;&#x2F;p&gt;
&lt;p&gt;To draw bounding boxes, we can use the &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;PistonDevelopers&#x2F;imageproc&quot;&gt;imageproc&lt;&#x2F;a&gt; library to draw simple borders around the bounding boxes.&lt;&#x2F;p&gt;
&lt;p&gt;Firstly, we&#x27;ll make the line colour constant green outside of our &lt;code&gt;main()&lt;&#x2F;code&gt; function:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LINE_COLOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Rgba&amp;lt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u8&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;gt; = Rgba {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;data: [&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;255&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;],
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;};
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Now stepping back into it.  We are feeding in the input image read only, so let&#x27;s first make a clone of it that we can draw onto:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; output_image = input_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;clone&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then we iterate through our bounding boxes:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; bbox in bboxes {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#65737e;&quot;&gt;&#x2F;&#x2F;Drawing Happens Here!
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Next, we use the &lt;code&gt;draw_hollow_rect_mut&lt;&#x2F;code&gt; function.  This will take a mutable image reference, and draw a hollow rectangle (outline) specified by the input &lt;code&gt;Rect&lt;&#x2F;code&gt;, overwriting any existing pixels.&lt;&#x2F;p&gt;
&lt;p&gt;The &lt;code&gt;Rect&lt;&#x2F;code&gt; takes an x and y coordinate with the &lt;code&gt;at&lt;&#x2F;code&gt; function, and then a width and height with the &lt;code&gt;of_size&lt;&#x2F;code&gt; function.  We use a bit of geometry to convert our bounding box to this format:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; rect = Rect::at(bbox.x1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, bbox.y1 as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;i32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;of_size&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;((bbox.x2 - bbox.x1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, (bbox.y2 - bbox.y1) as &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;u32&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Then draw the rect:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#96b5b4;&quot;&gt;draw_hollow_rect_mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;mut&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; img, rect, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;LINE_COLOUR&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Once the for loop is done, we save it in the output file:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;output_image.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;save&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;opt.output)?
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;And we&#x27;re done. Let&#x27;s run it!&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#c0c5ce;&quot;&gt;$ cargo run rustfest.jpg output.jpg
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;   &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Compiling mtcnn v0.1.0 (~&#x2F;mtcnn)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Finished dev [unoptimized + debuginfo] target(s) in 5.12s
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;     &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Running &#96;target&#x2F;debug&#x2F;mtcnn rustfest.jpg output.jpg&#96;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;2019-03-28 16:15:48.194933: I tensorflow&#x2F;core&#x2F;platform&#x2F;cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: SSE4.2 AVX AVX2 FMA
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox Length: 154, BBoxes:[
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;BBox {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x1: 951.46875,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y1: 274.00577,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;x2: 973.68304,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;y2: 301.93915,
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;prob: 0.9999999
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;},
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;....
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Looks good, no errors!&lt;&#x2F;p&gt;
&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;&#x2F;h2&gt;
&lt;p&gt;Let&#x27;s step through what we&#x27;ve done in this little application:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Loaded a pre-trained tensorflow graph&lt;&#x2F;li&gt;
&lt;li&gt;Parse the command line arguments&lt;&#x2F;li&gt;
&lt;li&gt;Read in image data&lt;&#x2F;li&gt;
&lt;li&gt;Extracted faces by running a tensorflow session&lt;&#x2F;li&gt;
&lt;li&gt;Saved the results of that session back to the image&lt;&#x2F;li&gt;
&lt;li&gt;Wrote out the file&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If you got stuck at any point, have a look at the repository here: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mtcnn&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Hopefully this gives you a good introduction to using tensorflow in rust&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>TMQ 0.1.0 Release: ZeroMQ bindings for Tokio</title>
                <pubDate>Thu, 07 Feb 2019 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/tmq-0-1-0/</link>
                <guid>https://cetra3.github.io/blog/tmq-0-1-0/</guid>
                <description>&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;TMQ&lt;&#x2F;a&gt; is a rust library to use &lt;a href=&quot;http:&#x2F;&#x2F;zeromq.org&#x2F;&quot;&gt;ZeroMQ&lt;&#x2F;a&gt; within the &lt;a href=&quot;https:&#x2F;&#x2F;tokio.rs&#x2F;&quot;&gt;Tokio&lt;&#x2F;a&gt; ecosystem.  ZeroMQ is a distributed messaging queue written in C supporting a number of different messaging patterns.  While there are other options out there (including gRPC, etc..), I settled on ZeroMQ due to its cross-language support, great documentation and battle-tested nature.&lt;&#x2F;p&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&#x2F;0.1.0&quot;&gt;Version &lt;code&gt;0.1.0&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; is an alpha release which implements &lt;code&gt;request&lt;&#x2F;code&gt;, &lt;code&gt;response&lt;&#x2F;code&gt;, &lt;code&gt;publish&lt;&#x2F;code&gt; and &lt;code&gt;subscribe&lt;&#x2F;code&gt; style sockets.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;usage-example&quot;&gt;Usage Example&lt;&#x2F;h2&gt;
&lt;p&gt;This example uses &lt;code&gt;tmq&lt;&#x2F;code&gt; to subscribe to messages, and then prints them out via &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;seanmonstar&#x2F;pretty-env-logger&quot;&gt;pretty-env-logger&lt;&#x2F;a&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; failure;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; futures;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;#[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;macro_use&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;]
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; log;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; pretty_env_logger;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tmq;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;extern crate&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; tokio;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;futures::{Future, Stream};
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tmq::*;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;use &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;std::env;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8fa1b3;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Err(_) = env::var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;) {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;env::set_var(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;RUST_LOG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, &amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;subscribe=DEBUG&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;pretty_env_logger::init();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; request = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;127.0.0.1:7899&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;expect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Couldn&amp;#39;t connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;subscribe&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;for_each&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;val&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Subscribe: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, val.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map_err&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;e&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;error!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Error Subscribing: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, e);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;tokio::run(request);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;Other examples of usage can be found in the project itself: &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;tree&#x2F;master&#x2F;examples&quot;&gt;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;tree&#x2F;master&#x2F;examples&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;existing-rust-crates&quot;&gt;Existing Rust Crates&lt;&#x2F;h2&gt;
&lt;p&gt;To find out where &lt;code&gt;tmq&lt;&#x2F;code&gt; sits within the rust ecosystem, it makes sense to discuss this in terms of other ZeroMQ crates.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-rust-zeromq-bindings&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;zmq&quot;&gt;zmq&lt;&#x2F;a&gt; - Rust ZeroMQ Bindings&lt;&#x2F;h3&gt;
&lt;p&gt;This library has bindings to the C API and provides a great way to use ZeroMQ within rust.  You still need a copy of ZeroMQ on your system and need it compiled in, but that difficulty is pretty much on par with using OpenSSL.  I have managed to use this library in OSX, CentOS and Ubuntu with not many issues.&lt;&#x2F;p&gt;
&lt;p&gt;The only downside of this library is the lack of bindings to tokio, and is one of the primary motivators for creating &lt;code&gt;tmq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-rs-a-native-implementation-of-zeromq-in-rust&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeromq&#x2F;zmq.rs&quot;&gt;zmq.rs&lt;&#x2F;a&gt; - A Native Implementation of ZeroMQ in Rust&lt;&#x2F;h3&gt;
&lt;p&gt;This library was a Rewrite in Rust attempt at a full ZeroMQ reimplementation, which hasn&#x27;t seen any changes &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;zeromq&#x2F;zmq.rs&#x2F;commits&#x2F;master&quot;&gt;since 2015&lt;&#x2F;a&gt; and can probably be considered abandoned.  Regardless: this API is still the old blocking style, which would still predicate a need for &lt;code&gt;tmq&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;h3 id=&quot;zmq-tokio-run-omq-sockets-using-tokio-reactors-futures-etc&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rotty&#x2F;zmq-tokio&quot;&gt;zmq-tokio&lt;&#x2F;a&gt; - Run ØMQ sockets using tokio reactors, futures, etc.&lt;&#x2F;h3&gt;
&lt;p&gt;Not even published on crates.io but a great initial attempt at bridging the async gap.  This crate used the historic &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio-core&quot;&gt;tokio-core&lt;&#x2F;a&gt; library which is a bit of a pain to adapt to the new &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; crate.  Unfortunately it looks like it&#x27;s since &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rotty&#x2F;zmq-tokio&#x2F;pull&#x2F;7&quot;&gt;been abandoned&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tokio-zmq-zeromq-concepts-with-futures-on-tokio-s-runtime&quot;&gt;&lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-zmq&quot;&gt;tokio-zmq&lt;&#x2F;a&gt; - ZeroMQ Concepts with futures on Tokio&#x27;s runtime&lt;&#x2F;h3&gt;
&lt;p&gt;This library is probably the most polished version for &lt;code&gt;tokio&lt;&#x2F;code&gt; and one that would be compared mostly to &lt;code&gt;tmq&lt;&#x2F;code&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;I would have chosen this library, but the one major roadblock is the &lt;a href=&quot;https:&#x2F;&#x2F;www.gnu.org&#x2F;licenses&#x2F;gpl-3.0.en.html&quot;&gt;GPL&lt;&#x2F;a&gt; license.  The GPL within a rust project is viral.  You can&#x27;t use this library without making the rest of your project GPL or GPL Compatible. If this doesn&#x27;t concern you, then I would consider using this library.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;comparison-between-tmq&quot;&gt;Comparison between tmq&lt;&#x2F;h3&gt;
&lt;p&gt;In comparison to &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt;, &lt;code&gt;tmq&lt;&#x2F;code&gt; has less boilerplate to acheive the same thing, but does use a couple of custom traits to speed things along.  This makes &lt;code&gt;tmq&lt;&#x2F;code&gt; a bit more opinionated, but less verbose.&lt;&#x2F;p&gt;
&lt;p&gt;Both styles have their merits, &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt; does give you more control over things wheras &lt;code&gt;tmq&lt;&#x2F;code&gt; is, in my opinion, easier to write and reason about, but more restrictive in how you use it.&lt;&#x2F;p&gt;
&lt;p&gt;To do a direct comparison of both libraries we&#x27;re using the &lt;code&gt;response&lt;&#x2F;code&gt; example.  This example is a simple echo response, which when it receives a message, it echos it back verbatim to the requester.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;tokio-zmq&quot;&gt;tokio-zmq&lt;&#x2F;h4&gt;
&lt;p&gt;Here is the &lt;a href=&quot;https:&#x2F;&#x2F;git.asonix.dog&#x2F;asonix&#x2F;async-zmq&#x2F;src&#x2F;branch&#x2F;development&#x2F;tokio-zmq&#x2F;examples&quot;&gt;excerpt&lt;&#x2F;a&gt; from &lt;code&gt;tokio-zmq&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; ctx = Arc::new(zmq::Context::new());
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; req_fut = Req::builder(ctx).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;connect&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;localhost:5560&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; runner = req_fut.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;send&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;and_then&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;req&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sink, stream) = req.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;sink_stream&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;25&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;).&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;split&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;();
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;stream
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;zip&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;iter_ok&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;1&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;..&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;10_000&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;))
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;map&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;i&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;)| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;for&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; msg in multipart {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b48ead;&quot;&gt;if let &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Some(msg) = msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;() {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;println!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Received: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d08770;&quot;&gt;{}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, msg);
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;}
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;                &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;build_multipart&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(i)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;            &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;forward&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(sink)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;})
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;On of the things you will notice is there is a lot of standard &lt;code&gt;futures&lt;&#x2F;code&gt; and &lt;code&gt;tokio&lt;&#x2F;code&gt; types used here: &lt;code&gt;sink&lt;&#x2F;code&gt;, &lt;code&gt;stream&lt;&#x2F;code&gt;, etc..  While this does make it more verbose, you are using constructs that you are familiar with in the futures style.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;tmq&quot;&gt;tmq&lt;&#x2F;h3&gt;
&lt;p&gt;Here&#x27;s a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&#x2F;blob&#x2F;master&#x2F;examples&#x2F;response.rs&quot;&gt;similar example&lt;&#x2F;a&gt; (although not using &lt;code&gt;multipart&lt;&#x2F;code&gt; messages) from &lt;code&gt;tmq&lt;&#x2F;code&gt;:&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;&quot;&gt;
&lt;span style=&quot;color:#b48ead;&quot;&gt;let&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt; responder = &lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;respond&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;amp;Context::new())
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;bind&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;tcp:&#x2F;&#x2F;127.0.0.1:7899&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;)?
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;with&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(|&lt;&#x2F;span&gt;&lt;span style=&quot;color:#bf616a;&quot;&gt;msg&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;: Message| {
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;info!(&amp;quot;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#a3be8c;&quot;&gt;Request: {}&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;&amp;quot;, msg.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;as_str&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;().&lt;&#x2F;span&gt;&lt;span style=&quot;color:#96b5b4;&quot;&gt;unwrap_or&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;(&amp;quot;&amp;quot;));
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;Ok(msg)
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#c0c5ce;&quot;&gt;});
&lt;&#x2F;span&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;You&#x27;ll notice that the library has a bit less boilerplate, but is more opinionated on how you structure a response.&lt;&#x2F;p&gt;
&lt;p&gt;Instead of a &lt;code&gt;sink&#x2F;stream&lt;&#x2F;code&gt; approach, the responder is a stream but has a &lt;code&gt;with&lt;&#x2F;code&gt; method.  The &lt;code&gt;with&lt;&#x2F;code&gt; method takes anything that implements the &lt;code&gt;Responder&lt;&#x2F;code&gt; trait, of which there is a blanket implemenation for closures and functions that take a message and return a message.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;future-changes&quot;&gt;Future Changes&lt;&#x2F;h2&gt;
&lt;p&gt;While currently usable, the &lt;code&gt;tmq&lt;&#x2F;code&gt; library is far from finished and requires some work to bring it out of an alpha state.  In no particular order here are the plans for the library:&lt;&#x2F;p&gt;
&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;&#x2F;h4&gt;
&lt;p&gt;Unit tests and integration tests need to be added in order to confirm and wire up connections.  As the library is rather lightweight now the need for integration tests hasn&#x27;t really arisen, but this will become more complicated in the future as more socket types are added.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;benchmarking&quot;&gt;Benchmarking&lt;&#x2F;h4&gt;
&lt;p&gt;Benchmarks need to be added to the library in order to show the performance of using this over standard &lt;code&gt;zmq&lt;&#x2F;code&gt;.  Running up some dummy benchmarks show that it is perfomant enough for my current use case, and provides less overhead than your standard REST API calls.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;windows-support&quot;&gt;Windows Support&lt;&#x2F;h4&gt;
&lt;p&gt;I &lt;em&gt;cheated&lt;&#x2F;em&gt; a little by using the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;mio&#x2F;0.6.16&#x2F;mio&#x2F;event&#x2F;trait.Evented.html&quot;&gt;Evented&lt;&#x2F;a&gt; trait for mio, which makes it dead easy to use in tokio via &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;tokio&#x2F;0.1.15&#x2F;tokio&#x2F;reactor&#x2F;struct.PollEvented2.html&quot;&gt;PollEvented2&lt;&#x2F;a&gt;.&lt;&#x2F;p&gt;
&lt;p&gt;Unfortunately the async story on windows is a bit different, and I haven&#x27;t had a need to deploy on windows just yet.  But it is something that has been considered.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;documentation&quot;&gt;Documentation&lt;&#x2F;h4&gt;
&lt;p&gt;The library is mostly undocumented besides from the examples.  Documentation should be pretty easy to do at this stage and won&#x27;t take too long.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;more-socket-types&quot;&gt;More Socket Types&lt;&#x2F;h4&gt;
&lt;p&gt;Implementing more socket types, to make this feature complete with the standard &lt;code&gt;zmq&lt;&#x2F;code&gt; library.  There a plethora of different socket types for different use cases that give different guarantees.  The 4 standard ones implemented are enough for me to start using this library today, but could easily be expanded.&lt;&#x2F;p&gt;
&lt;h4 id=&quot;multipart-messages&quot;&gt;Multipart messages&lt;&#x2F;h4&gt;
&lt;p&gt;Multipart support for messages.  Currently this is not supported, but should be mostly easy to implement&lt;&#x2F;p&gt;
&lt;h2 id=&quot;further-thoughts&quot;&gt;Further thoughts&lt;&#x2F;h2&gt;
&lt;p&gt;I&#x27;m currently using &lt;code&gt;tmq&lt;&#x2F;code&gt; within an &lt;code&gt;actix-web&lt;&#x2F;code&gt; &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolbench.com.au&#x2F;&quot;&gt;application&lt;&#x2F;a&gt; to bridge some messages and audit logs between a polyglot backend (including Java &amp;amp; Python).  It has been quite solid so far, and I have plans to remove an existing ActiveMQ service to be replaced with &lt;code&gt;tmq&lt;&#x2F;code&gt; where appropriate.&lt;&#x2F;p&gt;
&lt;p&gt;Version &lt;code&gt;0.1.0&lt;&#x2F;code&gt; is the first real release, with previous releases having to vendor in the &lt;code&gt;zmq&lt;&#x2F;code&gt; library in order to publish.   While it is alpha, I don&#x27;t plan to change what is there currently unless there is a compelling reason to do so.&lt;&#x2F;p&gt;
&lt;p&gt;Please give &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tmq&quot;&gt;tmq&lt;&#x2F;a&gt; a try and let me know your thoughts!&lt;&#x2F;p&gt;
</description>
            </item>
        
            <item>
                <title>My Wishes for Rust 2019</title>
                <pubDate>Fri, 14 Dec 2018 00:00:00 +0000</pubDate>
                <link>https://cetra3.github.io/blog/rust-2019/</link>
                <guid>https://cetra3.github.io/blog/rust-2019/</guid>
                <description>&lt;p&gt;2018 was a massive year for rust, and it&#x27;s great to reflect back on how far we&#x27;ve all come.  My main wish for the new year is to put on the breaks a little bit, and finish off what has been started without taking on anything majorly new.&lt;&#x2F;p&gt;
&lt;p&gt;There are a couple of areas that I feel need more attention than most (purely for selfish reasons of course!):&lt;&#x2F;p&gt;
&lt;h2 id=&quot;compiler-times-ide-support-and-rls&quot;&gt;Compiler Times, IDE Support and RLS&lt;&#x2F;h2&gt;
&lt;p&gt;I think RLS is great.  I think &lt;code&gt;cargo check&lt;&#x2F;code&gt; is great too.  Sometimes when I am waiting for RLS to finish in VSCode, I run &lt;code&gt;cargo check&lt;&#x2F;code&gt; in a terminal to see who wins the race.  Sometimes I get results faster from the &lt;code&gt;cargo check&lt;&#x2F;code&gt; than I do in RLS.  I&#x27;m not sure why that is, it might be that I&#x27;m making a lot of small edits, and RLS is constantly restarting. I am assuming that the plumbing for both methods is rather similar.  On average, if I just adjust whitespace on one of my projects, it takes at least 10 seconds to recompile.  If I change any trivial bit of code, this doubles to 20 seconds.&lt;&#x2F;p&gt;
&lt;p&gt;I would love to have dynamic loading in rust as a first class citizen, but I fear the ABI stabilisation is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;rust-lang&#x2F;rfcs&#x2F;issues&#x2F;600&quot;&gt;far way off&lt;&#x2F;a&gt; (I know you can &lt;a href=&quot;https:&#x2F;&#x2F;michael-f-bryan.github.io&#x2F;rust-ffi-guide&#x2F;dynamic_loading.html&quot;&gt;cheat&lt;&#x2F;a&gt; by using the C ABI and &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;nagisa&#x2F;rust_libloading&quot;&gt;libloading&lt;&#x2F;a&gt; but there is a fair amount of &lt;code&gt;unsafe&lt;&#x2F;code&gt; code, which I&#x27;m not comfortable with).  This would alleviate some of the issues around compilation times, by allowing compilation to be broken up into smaller chunks.&lt;&#x2F;p&gt;
&lt;p&gt;For instance: I implemented a WebDAV handler with &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;actix&#x2F;actix-web&quot;&gt;actix-web&lt;&#x2F;a&gt;.  This added a significant portion of time to compilation after the implementation was finished, and the code is mostly decoupled from the rest of the app and sits in its own little route (XML instead of JSON, etc..).  I&#x27;d love to be able to just hot-load this as a module, rather than compile it in each time if I&#x27;m not even touching this part.  Incremental compilation does help a little bit here.&lt;&#x2F;p&gt;
&lt;h3 id=&quot;better-ide-support&quot;&gt;Better IDE Support&lt;&#x2F;h3&gt;
&lt;p&gt;I have been using &lt;a href=&quot;https:&#x2F;&#x2F;code.visualstudio.com&#x2F;&quot;&gt;VSCode&lt;&#x2F;a&gt; as my primary rust IDE for a while now, which is great, but I&#x27;d love to be able to use IntelliJ as well.  Each time there is an update, I do give it another shot, and find that there are a couple of problems with it:&lt;&#x2F;p&gt;
&lt;div style=&#x27;position:relative; padding-bottom:53.68%&#x27;&gt;&lt;iframe src=&#x27;https:&#x2F;&#x2F;gfycat.com&#x2F;ifr&#x2F;SmallCarefulDiamondbackrattlesnake&#x27; frameborder=&#x27;0&#x27; scrolling=&#x27;no&#x27; width=&#x27;100%&#x27; height=&#x27;100%&#x27; style=&#x27;position:absolute;top:0;left:0;&#x27; allowfullscreen&gt;&lt;&#x2F;iframe&gt;&lt;&#x2F;div&gt;
&lt;p&gt;&lt;em&gt;Weeeeeeeeeeeeeeeeeeeeeee&lt;&#x2F;em&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Admittedly, each release of the IntelliJ rust plugin is better than the last, but it is not even close to the support that Java has.  I am hoping that this changes in the future.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;d also love to be able to give &lt;a href=&quot;https:&#x2F;&#x2F;www.onivim.io&#x2F;&quot;&gt;Oni&lt;&#x2F;a&gt; a go, but currently it&#x27;s in limbo until I, or someone else, has enough time to work out &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;onivim&#x2F;oni&#x2F;issues&#x2F;1926&quot;&gt;what is wrong&lt;&#x2F;a&gt; with the Language Server Integration.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;async-await&quot;&gt;Async&#x2F;Await&lt;&#x2F;h2&gt;
&lt;p&gt;I would really love to see the async&#x2F;await story come to a close in 2019.  The rust team has laid the groundwork with the 2018 edition, and together with the new &lt;a href=&quot;https:&#x2F;&#x2F;boats.gitlab.io&#x2F;blog&#x2F;post&#x2F;2018-04-06-async-await-final&#x2F;&quot;&gt;pinning API&lt;&#x2F;a&gt; I feel like it&#x27;s &lt;em&gt;just&lt;&#x2F;em&gt; around the corner.  This has the opportunity to really change the landscape and make rust a much more productive language.&lt;&#x2F;p&gt;
&lt;p&gt;I&#x27;ve had a crack at writing both a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;mpart-async&#x2F;&quot;&gt;multipart client&lt;&#x2F;a&gt; &amp;amp; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;cetra3&#x2F;tmq&quot;&gt;ZeroMQ library&lt;&#x2F;a&gt;, but I can see that when the async stuff reaches stable, it&#x27;s going to make life a lot easier.   Kudos to the team for moving this forward (I also happen to think the &lt;a href=&quot;http:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;futures-rs&#x2F;assets&#x2F;images&#x2F;futures-rs-logo.svg&quot;&gt;logo&lt;&#x2F;a&gt; for &lt;code&gt;futures-rs&lt;&#x2F;code&gt; is pretty rad!)&lt;&#x2F;p&gt;
&lt;h3 id=&quot;documentation-churn&quot;&gt;Documentation Churn&lt;&#x2F;h3&gt;
&lt;p&gt;With these changes to async, there is going to be some challenges around documentation.  I feel in tokio-land there is a high degree of tribal knowledge that, if you don&#x27;t keep up with things, you are left behind.&lt;&#x2F;p&gt;
&lt;p&gt;There is the new &lt;code&gt;futures 0.3&lt;&#x2F;code&gt; crate, which is not currently in use by tokio crate, you have to use futures &lt;code&gt;0.1&lt;&#x2F;code&gt;.  No-one knows what happened to &lt;code&gt;0.2&lt;&#x2F;code&gt;, it&#x27;s a mystery left for future rust historians, and &lt;code&gt;0.3&lt;&#x2F;code&gt; is still very much in &lt;a href=&quot;http:&#x2F;&#x2F;rust-lang-nursery.github.io&#x2F;futures-rs&#x2F;blog&#x2F;2018&#x2F;09&#x2F;02&#x2F;futures-0.3.0-alpha.4.html&quot;&gt;alpha&lt;&#x2F;a&gt;. Earlier on in the year if you went straight to the &lt;a href=&quot;https:&#x2F;&#x2F;docs.rs&#x2F;futures&#x2F;&quot;&gt;docs.rs page&lt;&#x2F;a&gt; for futures, this would direct you to the &lt;code&gt;0.3&lt;&#x2F;code&gt; version, which isn&#x27;t helpful if you are using this in conjunction with tokio (this appears to be resolved now, by some clever use of yanking).&lt;&#x2F;p&gt;
&lt;p&gt;Another example is the move away from &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio-core&quot;&gt;tokio-core&lt;&#x2F;a&gt; into the standard &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;tokio&quot;&gt;tokio&lt;&#x2F;a&gt; crate.  This is something that is a great evolution for tokio, but has left a &lt;a href=&quot;https:&#x2F;&#x2F;crates.io&#x2F;crates&#x2F;tokio-core&#x2F;reverse_dependencies&quot;&gt;number of libraries&lt;&#x2F;a&gt; outdated.  A lot of the great blogs by pioneering devs have also become outdated when dealing with this, which increases the frustration for any newcomers.  I am hoping that now things are more &lt;em&gt;settled&lt;&#x2F;em&gt; that this won&#x27;t be much of an issue.&lt;&#x2F;p&gt;
&lt;p&gt;All of these changes adds to a high level of fatigue for developers.  If you&#x27;re not lucky enough to be working in this space day-to-day, coming back after 6 months would be daunting.  There is a &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tokio-rs&#x2F;doc-push&quot;&gt;push to help modernise the documentation&lt;&#x2F;a&gt;, but this hasn&#x27;t seen much activity in a couple of months.  I&#x27;m hoping to find some time in the new year to help out with this, as I think there is a lot of work to be done.&lt;&#x2F;p&gt;
&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;&#x2F;h2&gt;
&lt;p&gt;I think rust has come a long way and still has a long way to go.  I focused a lot of energy on &lt;a href=&quot;https:&#x2F;&#x2F;www.schoolbench.com.au&#x2F;&quot;&gt;writing apps&lt;&#x2F;a&gt; in rust this year, and will undoubtably accelerate the usage as time goes on.&lt;&#x2F;p&gt;
&lt;p&gt;I hope that the rust team has time to put on the breaks, and apply a bit of polish before doing anything major.  I also hope I have more time to contribute some bits and pieces here and there to make the community better.&lt;&#x2F;p&gt;
</description>
            </item>
        
    </channel>
</rss>
